{
  "address": "0xbF0dde4aD5a1578351C473862eC947B3A44cC026",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wallet_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "openingTime_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closingTime_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_chainlinkETHPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chainlinkUSDTPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_listingTime",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdvisor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNetAllowance",
          "type": "uint256"
        }
      ],
      "name": "LogAdvisorAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "advisor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevNetAllowance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNetAllowance",
          "type": "uint256"
        }
      ],
      "name": "LogAdvisorAllowanceChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "removedAdvisor",
          "type": "address"
        }
      ],
      "name": "LogAdvisorRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "advisor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bcubeAmountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "LogAdvisorShareWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "incomingWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "name": "LogBcubeBuyUsingEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "incomingUsdtUnits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "name": "LogBcubeBuyUsingUsdt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bcubeAmountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "LogBountyShareWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bcubeAmountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "LogCommunityShareWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bcubeAmountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "LogDevFundShareWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newChainlinkETHPriceFeed",
          "type": "address"
        }
      ],
      "name": "LogETHPriceFeedChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LogEtherReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevListingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newListingTime",
          "type": "uint256"
        }
      ],
      "name": "LogListingTimeChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bcubeAmountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "LogPrivateSaleShareWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousClosingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newClosingTime",
          "type": "uint256"
        }
      ],
      "name": "LogPrivateSaleTimeExtension",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bcubeAmountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "LogPublicSaleShareWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bcubeAmountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "LogReservesShareWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bcubeAmountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "LogTeamShareWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newUsdtContract",
          "type": "address"
        }
      ],
      "name": "LogUSDTInstanceChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newChainlinkUSDTPriceFeed",
          "type": "address"
        }
      ],
      "name": "LogUSDTPriceFeedChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevClosingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newClosingTime",
          "type": "uint256"
        }
      ],
      "name": "TimedCrowdsaleExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistedRemoved",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "HARD_CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdvisor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_netAllowance",
          "type": "uint256"
        }
      ],
      "name": "addAdvisor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelistAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bcubeAmount",
          "type": "uint256"
        }
      ],
      "name": "advisorShareWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "advisors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "increaseInAllowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentAllowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareWithdrawn",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bcubeAllocationRegistry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dollarUnitsPayed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocatedBcube",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentAllowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareWithdrawn",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bcubeAmount",
          "type": "uint256"
        }
      ],
      "name": "bountyShareWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "bountyWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "buyBcubeUsingETH",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "incomingUsdt",
          "type": "uint256"
        }
      ],
      "name": "buyBcubeUsingUSDT",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bcubeAmount",
          "type": "uint256"
        }
      ],
      "name": "communityShareWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "communityShareWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "devFundAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bcubeAmount",
          "type": "uint256"
        }
      ],
      "name": "devFundShareWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "devFundShareWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newClosingTime",
          "type": "uint256"
        }
      ],
      "name": "extendClosingTime",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fetchETHPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fetchUSDTPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "hasClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelistAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "listingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "netAllocatedBcube",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "openingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bcubeAmount",
          "type": "uint256"
        }
      ],
      "name": "privateSaleShareWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bcubeAmount",
          "type": "uint256"
        }
      ],
      "name": "publicSaleShareWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "publicSaleShareWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_advisor",
          "type": "address"
        }
      ],
      "name": "removeAdvisor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeWhitelisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceWhitelistAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceWhitelisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bcubeAmount",
          "type": "uint256"
        }
      ],
      "name": "reservesShareWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reservesWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_advisor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newNetAllowance",
          "type": "uint256"
        }
      ],
      "name": "setAdvisorAllowance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newChainlinkETHPriceFeed",
          "type": "address"
        }
      ],
      "name": "setETHPriceFeed",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setListingTime",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newUsdtContract",
          "type": "address"
        }
      ],
      "name": "setUSDTInstance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newChainlinkUSDTPriceFeed",
          "type": "address"
        }
      ],
      "name": "setUSDTPriceFeed",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "teamAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bcubeAmount",
          "type": "uint256"
        }
      ],
      "name": "teamShareWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "teamShareWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "weiRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9172145ff50a688ddc197f09403ecd3694d1ad549ec09b0c035b7f73f762878",
  "receipt": {
    "to": null,
    "from": "0xb5c2eB1C79302A20CE8D8e041B3aD44D2F3CD6Dd",
    "contractAddress": "0xbF0dde4aD5a1578351C473862eC947B3A44cC026",
    "transactionIndex": 44,
    "gasUsed": "3545539",
    "logsBloom": "0x00000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000002000000000000000000004140000000000000004000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf011f00b663600896c521f77d1167d4de7ae09e5714223d2ecc732edd5adacc0",
    "transactionHash": "0xb9172145ff50a688ddc197f09403ecd3694d1ad549ec09b0c035b7f73f762878",
    "logs": [
      {
        "transactionIndex": 44,
        "blockNumber": 7797994,
        "transactionHash": "0xb9172145ff50a688ddc197f09403ecd3694d1ad549ec09b0c035b7f73f762878",
        "address": "0xbF0dde4aD5a1578351C473862eC947B3A44cC026",
        "topics": [
          "0x22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd20961299",
          "0x000000000000000000000000b5c2eb1c79302a20ce8d8e041b3ad44d2f3cd6dd"
        ],
        "data": "0x",
        "logIndex": 59,
        "blockHash": "0xf011f00b663600896c521f77d1167d4de7ae09e5714223d2ecc732edd5adacc0"
      }
    ],
    "blockNumber": 7797994,
    "cumulativeGasUsed": "28137156",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB8ca88bFE9520e52C034D5901177a9F9504495A4",
    "0xDaE0524F938ad5f83bE3e91cF55c935f56Ac556A",
    1666201140,
    1673977140,
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e",
    "0xAb5c49580294Aff77670F839ea425f5b78ab3Ae7",
    "0xb5B640E6414b6DeF4FC9B3C1EeF373925effeCcF",
    1680889140
  ],
  "numDeployments": 2,
  "solcInputHash": "6e0f95abc7d2787dd6bfa0a3198b1010",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openingTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTime_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chainlinkETHPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkUSDTPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_listingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdvisor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNetAllowance\",\"type\":\"uint256\"}],\"name\":\"LogAdvisorAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"advisor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevNetAllowance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNetAllowance\",\"type\":\"uint256\"}],\"name\":\"LogAdvisorAllowanceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAdvisor\",\"type\":\"address\"}],\"name\":\"LogAdvisorRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"advisor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bcubeAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LogAdvisorShareWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"LogBcubeBuyUsingEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingUsdtUnits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"LogBcubeBuyUsingUsdt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bcubeAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LogBountyShareWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bcubeAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LogCommunityShareWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bcubeAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LogDevFundShareWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newChainlinkETHPriceFeed\",\"type\":\"address\"}],\"name\":\"LogETHPriceFeedChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogEtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevListingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newListingTime\",\"type\":\"uint256\"}],\"name\":\"LogListingTimeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bcubeAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LogPrivateSaleShareWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"LogPrivateSaleTimeExtension\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bcubeAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LogPublicSaleShareWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bcubeAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LogReservesShareWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bcubeAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LogTeamShareWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUsdtContract\",\"type\":\"address\"}],\"name\":\"LogUSDTInstanceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newChainlinkUSDTPriceFeed\",\"type\":\"address\"}],\"name\":\"LogUSDTPriceFeedChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdvisor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_netAllowance\",\"type\":\"uint256\"}],\"name\":\"addAdvisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bcubeAmount\",\"type\":\"uint256\"}],\"name\":\"advisorShareWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"advisors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"increaseInAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bcubeAllocationRegistry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dollarUnitsPayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocatedBcube\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bcubeAmount\",\"type\":\"uint256\"}],\"name\":\"bountyShareWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyBcubeUsingETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incomingUsdt\",\"type\":\"uint256\"}],\"name\":\"buyBcubeUsingUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bcubeAmount\",\"type\":\"uint256\"}],\"name\":\"communityShareWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityShareWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFundAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bcubeAmount\",\"type\":\"uint256\"}],\"name\":\"devFundShareWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFundShareWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newClosingTime\",\"type\":\"uint256\"}],\"name\":\"extendClosingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchETHPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchUSDTPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"netAllocatedBcube\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bcubeAmount\",\"type\":\"uint256\"}],\"name\":\"privateSaleShareWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bcubeAmount\",\"type\":\"uint256\"}],\"name\":\"publicSaleShareWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleShareWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_advisor\",\"type\":\"address\"}],\"name\":\"removeAdvisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bcubeAmount\",\"type\":\"uint256\"}],\"name\":\"reservesShareWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservesWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_advisor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newNetAllowance\",\"type\":\"uint256\"}],\"name\":\"setAdvisorAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newChainlinkETHPriceFeed\",\"type\":\"address\"}],\"name\":\"setETHPriceFeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setListingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUsdtContract\",\"type\":\"address\"}],\"name\":\"setUSDTInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newChainlinkUSDTPriceFeed\",\"type\":\"address\"}],\"name\":\"setUSDTPriceFeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bcubeAmount\",\"type\":\"uint256\"}],\"name\":\"teamShareWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamShareWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Smit Rajput @ b-cube.ai*\",\"methods\":{\"advisorShareWithdraw(uint256)\":{\"details\":\"allows existing advisors to withdraw their share of BCUBEs, 25% per 6 months, after listingTime\"},\"bountyShareWithdraw(uint256)\":{\"details\":\"allows team to withdraw bounty share of BCUBEs i.e. 0.5m\"},\"buyBcubeUsingETH()\":{\"details\":\"allowing users to allocate BCUBEs for themselves using ETH only KYC/AML whitelisted users can call this, while the sale is open and allocation hard cap is not reachedit fetches current price of ETH, multiples that by incoming ETH to calc total incoming dollar units, then allocates appropriate amount of BCUBE to user based on current rate, stage\"},\"buyBcubeUsingUSDT(uint256)\":{\"details\":\"allowing users to allocate BCUBEs for themselves using USDT does all things similar to the above function, but for USDT\"},\"buyTokens()\":{\"details\":\"token buying function of the parent contract which is not used for this contract\"},\"buyTokens(address)\":{\"details\":\"low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.\",\"params\":{\"beneficiary\":\"Recipient of the token purchase\"}},\"closingTime()\":{\"return\":\"the crowdsale closing time.\"},\"communityShareWithdraw(uint256)\":{\"details\":\"allows team to withdraw community share of BCUBEs i.e. 2.5m\"},\"constructor\":{\"params\":{\"wallet_\":\"team's address which controls all BCUBEs except private sale share\"}},\"devFundShareWithdraw(uint256)\":{\"details\":\"allows team to withdraw devFund share of BCUBEs, 25% of 7.5m, per 6 months, after listingTime\"},\"extendClosingTime(uint256)\":{\"details\":\"to extend the current closing time of private sale\"},\"fetchETHPrice()\":{\"details\":\"fetching ETH price from chainlink oracle\"},\"fetchUSDTPrice()\":{\"details\":\"fetching USDT price from chainlink oracle\"},\"hasClosed()\":{\"details\":\"Checks whether the period in which the crowdsale is open has already elapsed.\",\"return\":\"Whether crowdsale period has elapsed\"},\"isOpen()\":{\"return\":\"true if the crowdsale is open, false otherwise.\"},\"openingTime()\":{\"return\":\"the crowdsale opening time.\"},\"privateSaleShareWithdraw(uint256)\":{\"details\":\"allows private sale participants to withdraw their allocated share of BCUBEs, 25% per 30 days, after listingTime\"},\"publicSaleShareWithdraw(uint256)\":{\"details\":\"allows team to withdraw publicSale share of BCUBEs i.e. 25m - (netAllocatedBcube in private sale)\"},\"rate()\":{\"details\":\"dummy rate for the parent contract which is not used for this contract\"},\"reservesShareWithdraw(uint256)\":{\"details\":\"allows team to withdraw reserves share of BCUBEs i.e. 7m after listingTime\"},\"setAdvisorAllowance(address,uint256)\":{\"details\":\"allows deployer to change net allowance of existing advisor\"},\"setETHPriceFeed(address)\":{\"details\":\"allowing resetting ETH, USDT priceFeed instances, in case current Chainlink contracts upgrade\"},\"setListingTime(uint256)\":{\"details\":\"WhitelistAdmin is the deployerallows deployer to change listingTime, before current listingTime\"},\"setUSDTInstance(address)\":{\"details\":\"allowing resetting USDT instance, in case current contract upgrades\"},\"teamShareWithdraw(uint256)\":{\"details\":\"allows team to withdraw their share of BCUBEs, 12.5% of 5m, per 6 months, after listingTime\"},\"token()\":{\"return\":\"the token being sold.\"},\"wallet()\":{\"return\":\"the address where funds are collected.\"},\"weiRaised()\":{\"return\":\"the amount of wei raised.\"}},\"title\":\"BCUBE Treasury\"},\"userdoc\":{\"methods\":{},\"notice\":\"Contract in which 50m BCUBE will be minted after private sale, and distributed to stakeholders, in vested manner to whomever applicable\"}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x636b9f52b4ef5795c35a189a94e95a8f909ed1f7ef799e0218b71d97b3a780a0\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/access/Roles.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0xb002c378d7b82a101bd659c341518953ca0919d342c0a400196982c0e7e7bcdb\"},\"@openzeppelin/contracts/access/roles/WhitelistAdminRole.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../Roles.sol\\\";\\n\\n/**\\n * @title WhitelistAdminRole\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n */\\ncontract WhitelistAdminRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event WhitelistAdminAdded(address indexed account);\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n    constructor () internal {\\n        _addWhitelistAdmin(_msgSender());\\n    }\\n\\n    modifier onlyWhitelistAdmin() {\\n        require(isWhitelistAdmin(_msgSender()), \\\"WhitelistAdminRole: caller does not have the WhitelistAdmin role\\\");\\n        _;\\n    }\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n        return _whitelistAdmins.has(account);\\n    }\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n        _addWhitelistAdmin(account);\\n    }\\n\\n    function renounceWhitelistAdmin() public {\\n        _removeWhitelistAdmin(_msgSender());\\n    }\\n\\n    function _addWhitelistAdmin(address account) internal {\\n        _whitelistAdmins.add(account);\\n        emit WhitelistAdminAdded(account);\\n    }\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n        _whitelistAdmins.remove(account);\\n        emit WhitelistAdminRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x68a31c5d88d371650921f970f37ff38c63dce2a214ac7ab6f455bd857f79e8b4\"},\"@openzeppelin/contracts/access/roles/WhitelistedRole.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../Roles.sol\\\";\\nimport \\\"./WhitelistAdminRole.sol\\\";\\n\\n/**\\n * @title WhitelistedRole\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n * it), and not Whitelisteds themselves.\\n */\\ncontract WhitelistedRole is Context, WhitelistAdminRole {\\n    using Roles for Roles.Role;\\n\\n    event WhitelistedAdded(address indexed account);\\n    event WhitelistedRemoved(address indexed account);\\n\\n    Roles.Role private _whitelisteds;\\n\\n    modifier onlyWhitelisted() {\\n        require(isWhitelisted(_msgSender()), \\\"WhitelistedRole: caller does not have the Whitelisted role\\\");\\n        _;\\n    }\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n        return _whitelisteds.has(account);\\n    }\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n        _addWhitelisted(account);\\n    }\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n        _removeWhitelisted(account);\\n    }\\n\\n    function renounceWhitelisted() public {\\n        _removeWhitelisted(_msgSender());\\n    }\\n\\n    function _addWhitelisted(address account) internal {\\n        _whitelisteds.add(account);\\n        emit WhitelistedAdded(account);\\n    }\\n\\n    function _removeWhitelisted(address account) internal {\\n        _whitelisteds.remove(account);\\n        emit WhitelistedRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xca10f528034c05dc9d98400e7b184e43ae13192bfd502f14e113959e7d25f953\"},\"@openzeppelin/contracts/crowdsale/Crowdsale.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Crowdsale\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\n * allowing investors to purchase tokens with ether. This contract implements\\n * such functionality in its most fundamental form and can be extended to provide additional\\n * functionality and/or custom behavior.\\n * The external interface represents the basic interface for purchasing tokens, and conforms\\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\\n * behavior.\\n */\\ncontract Crowdsale is Context, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // The token being sold\\n    IERC20 private _token;\\n\\n    // Address where funds are collected\\n    address payable private _wallet;\\n\\n    // How many token units a buyer gets per wei.\\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\\n    // 1 wei will give you 1 unit, or 0.001 TOK.\\n    uint256 private _rate;\\n\\n    // Amount of wei raised\\n    uint256 private _weiRaised;\\n\\n    /**\\n     * Event for token purchase logging\\n     * @param purchaser who paid for the tokens\\n     * @param beneficiary who got the tokens\\n     * @param value weis paid for purchase\\n     * @param amount amount of tokens purchased\\n     */\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\n\\n    /**\\n     * @param rate Number of token units a buyer gets per wei\\n     * @dev The rate is the conversion between wei and the smallest and indivisible\\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\n     * @param wallet Address where collected funds will be forwarded to\\n     * @param token Address of the token being sold\\n     */\\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\\n        require(rate > 0, \\\"Crowdsale: rate is 0\\\");\\n        require(wallet != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\n        require(address(token) != address(0), \\\"Crowdsale: token is the zero address\\\");\\n\\n        _rate = rate;\\n        _wallet = wallet;\\n        _token = token;\\n    }\\n\\n    /**\\n     * @dev fallback function ***DO NOT OVERRIDE***\\n     * Note that other contracts will transfer funds with a base gas stipend\\n     * of 2300, which is not enough to call buyTokens. Consider calling\\n     * buyTokens directly when purchasing tokens from a contract.\\n     */\\n    function () external payable {\\n        buyTokens(_msgSender());\\n    }\\n\\n    /**\\n     * @return the token being sold.\\n     */\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the address where funds are collected.\\n     */\\n    function wallet() public view returns (address payable) {\\n        return _wallet;\\n    }\\n\\n    /**\\n     * @return the number of token units a buyer gets per wei.\\n     */\\n    function rate() public view returns (uint256) {\\n        return _rate;\\n    }\\n\\n    /**\\n     * @return the amount of wei raised.\\n     */\\n    function weiRaised() public view returns (uint256) {\\n        return _weiRaised;\\n    }\\n\\n    /**\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\n     * This function has a non-reentrancy guard, so it shouldn't be called by\\n     * another `nonReentrant` function.\\n     * @param beneficiary Recipient of the token purchase\\n     */\\n    function buyTokens(address beneficiary) public nonReentrant payable {\\n        uint256 weiAmount = msg.value;\\n        _preValidatePurchase(beneficiary, weiAmount);\\n\\n        // calculate token amount to be created\\n        uint256 tokens = _getTokenAmount(weiAmount);\\n\\n        // update state\\n        _weiRaised = _weiRaised.add(weiAmount);\\n\\n        _processPurchase(beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\\n\\n        _updatePurchasingState(beneficiary, weiAmount);\\n\\n        _forwardFunds();\\n        _postValidatePurchase(beneficiary, weiAmount);\\n    }\\n\\n    /**\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\n     *     require(weiRaised().add(weiAmount) <= cap);\\n     * @param beneficiary Address performing the token purchase\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\n        require(beneficiary != address(0), \\\"Crowdsale: beneficiary is the zero address\\\");\\n        require(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    }\\n\\n    /**\\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\\n     * conditions are not met.\\n     * @param beneficiary Address performing the token purchase\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\\n     * its tokens.\\n     * @param beneficiary Address performing the token purchase\\n     * @param tokenAmount Number of tokens to be emitted\\n     */\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\n        _token.safeTransfer(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\\n     * tokens.\\n     * @param beneficiary Address receiving the tokens\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\\n        _deliverTokens(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\\n     * etc.)\\n     * @param beneficiary Address receiving the tokens\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which ether is converted to tokens.\\n     * @param weiAmount Value in wei to be converted into tokens\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\n     */\\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\\n        return weiAmount.mul(_rate);\\n    }\\n\\n    /**\\n     * @dev Determines how ETH is stored/forwarded on purchases.\\n     */\\n    function _forwardFunds() internal {\\n        _wallet.transfer(msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xe612eb8a3023c1a4f4d7e2d0aaf7f19c25e9d772c46a6e95790ddb42ba7baa99\"},\"@openzeppelin/contracts/crowdsale/validation/TimedCrowdsale.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../Crowdsale.sol\\\";\\n\\n/**\\n * @title TimedCrowdsale\\n * @dev Crowdsale accepting contributions only within a time frame.\\n */\\ncontract TimedCrowdsale is Crowdsale {\\n    using SafeMath for uint256;\\n\\n    uint256 private _openingTime;\\n    uint256 private _closingTime;\\n\\n    /**\\n     * Event for crowdsale extending\\n     * @param newClosingTime new closing time\\n     * @param prevClosingTime old closing time\\n     */\\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\\n\\n    /**\\n     * @dev Reverts if not in crowdsale time range.\\n     */\\n    modifier onlyWhileOpen {\\n        require(isOpen(), \\\"TimedCrowdsale: not open\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor, takes crowdsale opening and closing times.\\n     * @param openingTime Crowdsale opening time\\n     * @param closingTime Crowdsale closing time\\n     */\\n    constructor (uint256 openingTime, uint256 closingTime) public {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(openingTime >= block.timestamp, \\\"TimedCrowdsale: opening time is before current time\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(closingTime > openingTime, \\\"TimedCrowdsale: opening time is not before closing time\\\");\\n\\n        _openingTime = openingTime;\\n        _closingTime = closingTime;\\n    }\\n\\n    /**\\n     * @return the crowdsale opening time.\\n     */\\n    function openingTime() public view returns (uint256) {\\n        return _openingTime;\\n    }\\n\\n    /**\\n     * @return the crowdsale closing time.\\n     */\\n    function closingTime() public view returns (uint256) {\\n        return _closingTime;\\n    }\\n\\n    /**\\n     * @return true if the crowdsale is open, false otherwise.\\n     */\\n    function isOpen() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\\n    }\\n\\n    /**\\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\n     * @return Whether crowdsale period has elapsed\\n     */\\n    function hasClosed() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > _closingTime;\\n    }\\n\\n    /**\\n     * @dev Extend parent behavior requiring to be within contributing period.\\n     * @param beneficiary Token purchaser\\n     * @param weiAmount Amount of wei contributed\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\\n        super._preValidatePurchase(beneficiary, weiAmount);\\n    }\\n\\n    /**\\n     * @dev Extend crowdsale.\\n     * @param newClosingTime Crowdsale closing time\\n     */\\n    function _extendTime(uint256 newClosingTime) internal {\\n        require(!hasClosed(), \\\"TimedCrowdsale: already closed\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(newClosingTime > _closingTime, \\\"TimedCrowdsale: new closing time is before current closing time\\\");\\n\\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\\n        _closingTime = newClosingTime;\\n    }\\n}\\n\",\"keccak256\":\"0x9407dd37cfed74aa107fd1614c478ba0a2bc3e084e9aa8fbd5a6f316c53aed3b\"},\"@openzeppelin/contracts/crowdsale/validation/WhitelistCrowdsale.sol\":{\"content\":\"pragma solidity ^0.5.0;\\nimport \\\"../Crowdsale.sol\\\";\\nimport \\\"../../access/roles/WhitelistedRole.sol\\\";\\n\\n\\n/**\\n * @title WhitelistCrowdsale\\n * @dev Crowdsale in which only whitelisted users can contribute.\\n */\\ncontract WhitelistCrowdsale is WhitelistedRole, Crowdsale {\\n    /**\\n     * @dev Extend parent behavior requiring beneficiary to be whitelisted. Note that no\\n     * restriction is imposed on the account sending the transaction.\\n     * @param _beneficiary Token beneficiary\\n     * @param _weiAmount Amount of wei contributed\\n     */\\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\\n        require(isWhitelisted(_beneficiary), \\\"WhitelistCrowdsale: beneficiary doesn't have the Whitelisted role\\\");\\n        super._preValidatePurchase(_beneficiary, _weiAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x67ab20e0bc1827cdd232cb46d1c0fc04a2dd1f4ad1f2168df4ee80533cb70821\"},\"@openzeppelin/contracts/drafts/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xf1587a6daea33c93e85fff4e205967183de459159aafcb01b7397fb7ec1f9f77\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0xb63221b23818d622bfd83d18e0968307e4fcb7a35536bdceded76e1cf8349acd\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and then downcasting.\\n *\\n * _Available since v2.5.0._\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb7353a57c9e371c85983df8997caf9bb6fa60c3744b34b2bfcf4faa52d06eaec\"},\"contracts/BCUBEPrivateSale.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/drafts/SignedSafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/crowdsale/Crowdsale.sol\\\";\\nimport \\\"@openzeppelin/contracts/crowdsale/validation/TimedCrowdsale.sol\\\";\\nimport \\\"@openzeppelin/contracts/crowdsale/validation/WhitelistCrowdsale.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title BCUBE Private Sale contract\\n * @author Smit Rajput @ b-cube.ai\\n **/\\n\\ncontract BCUBEPrivateSale is TimedCrowdsale, WhitelistCrowdsale {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev allowance is # of BCUBE each participant can withdraw from treasury.\\n    /// @param currentAllowance this allowance is in 4 stages tracked by currentAllowance\\n    /// @param shareWithdrawn tracks the amount of BCUBE already withdrawn from treasury\\n    /// @param dollarUnitsPayed 1 dollar = 100,000,000 dollar units. This tracks dollar units payed by user to this contract\\n    /// @param allocatedBcube amount of BCUBE allocated to this user\\n    struct UserInfo {\\n        uint256 dollarUnitsPayed;\\n        uint256 allocatedBcube;\\n        uint256 currentAllowance;\\n        uint256 shareWithdrawn;\\n    }\\n\\n    mapping(address => UserInfo) public bcubeAllocationRegistry;\\n    uint256 public netAllocatedBcube;\\n    uint256 public constant HARD_CAP = 10_000_000e18;\\n\\n    /// @dev variables whose instance fetch prices of USDT, ETH from Chainlink oracles\\n    AggregatorV3Interface internal priceFeedETH;\\n    AggregatorV3Interface internal priceFeedUSDT;\\n\\n    IERC20 public usdt;\\n\\n    event LogEtherReceived(address indexed sender, uint256 value);\\n    event LogBcubeBuyUsingEth(\\n        address indexed buyer,\\n        uint256 incomingWei,\\n        uint256 allocation\\n    );\\n    event LogBcubeBuyUsingUsdt(\\n        address indexed buyer,\\n        uint256 incomingUsdtUnits,\\n        uint256 allocation\\n    );\\n    event LogETHPriceFeedChange(address indexed newChainlinkETHPriceFeed);\\n    event LogUSDTPriceFeedChange(address indexed newChainlinkUSDTPriceFeed);\\n    event LogUSDTInstanceChange(address indexed newUsdtContract);\\n    event LogPrivateSaleTimeExtension(\\n        uint256 previousClosingTime,\\n        uint256 newClosingTime\\n    );\\n\\n    /// @dev ensuring BCUBE allocations in private sale don't exceed 10m\\n    modifier tokensRemaining() {\\n        require(netAllocatedBcube < HARD_CAP, \\\"All tokens allocated\\\");\\n        _;\\n    }\\n\\n    function() external payable {\\n        emit LogEtherReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @param wallet_ team's address which receives ETH, USDT from users\\n     * @param token_ BCUBE token address\\n     * @param openingTime_ private sale starting time\\n     * @param closingTime_ private sale closing time\\n     * @dev first argument of Crowdsale is dummy rate for the parent contract which is\\n     * not used for this contract\\n     */\\n    constructor(\\n        address payable wallet_,\\n        IERC20 token_,\\n        uint256 openingTime_,\\n        uint256 closingTime_,\\n        address _chainlinkETHPriceFeed,\\n        address _chainlinkUSDTPriceFeed,\\n        address _usdtContract\\n    )\\n        public\\n        TimedCrowdsale(openingTime_, closingTime_)\\n        Crowdsale(1, wallet_, token_)\\n    {\\n        priceFeedETH = AggregatorV3Interface(_chainlinkETHPriceFeed);\\n        priceFeedUSDT = AggregatorV3Interface(_chainlinkUSDTPriceFeed);\\n        usdt = IERC20(_usdtContract);\\n    }\\n\\n    /// @dev dummy rate for the parent contract which is not used for this contract\\n    function rate() public view returns (uint256) {\\n        revert(\\\"BCubePrivateSale: rate() called\\\");\\n    }\\n\\n    /// @dev token buying function of the parent contract which is not used for this contract\\n    function buyTokens() public pure returns (uint256) {\\n        revert(\\\"BCubePrivateSale: buyTokens() called\\\");\\n    }\\n\\n    /// @dev fetching ETH price from chainlink oracle\\n    function fetchETHPrice() public view returns (int256) {\\n        (, int256 price, , , ) = priceFeedETH.latestRoundData();\\n        return price;\\n    }\\n\\n    /// @dev fetching USDT price from chainlink oracle\\n    function fetchUSDTPrice() public view returns (int256) {\\n        (, int256 price, , , ) = priceFeedUSDT.latestRoundData();\\n        int256 ethUSD = fetchETHPrice();\\n        return price.mul(ethUSD).div(1e18);\\n    }\\n\\n    /// @dev rate i.e. number of BCUBE units (wBCUBE from now) per dollar unit, offer to private investors\\n    /// @return 2nd parameter is the number representing the current stage of the sale\\n    /// @dev rates for stage 3, 4 are (200/9 * 10**10) and (200/11 * 10**10)\\n    function calcRate() private view returns (uint256, uint8) {\\n        if (netAllocatedBcube < 2_500_000e18) {\\n            return (25e10, 1);\\n        } else if (netAllocatedBcube < 5_000_000e18) {\\n            return (222222222222, 2);\\n        } else if (netAllocatedBcube < 7_500_000e18) {\\n            return (20e10, 3);\\n        } else if (netAllocatedBcube <= 10_000_000e18) {\\n            return (181818181818, 4);\\n        }\\n    }\\n\\n    /// @dev allowing resetting ETH, USDT priceFeed instances, in case current Chainlink contracts upgrade\\n    function setETHPriceFeed(address _newChainlinkETHPriceFeed)\\n        external\\n        onlyWhitelistAdmin\\n    {\\n        priceFeedETH = AggregatorV3Interface(_newChainlinkETHPriceFeed);\\n        emit LogETHPriceFeedChange(_newChainlinkETHPriceFeed);\\n    }\\n\\n    function setUSDTPriceFeed(address _newChainlinkUSDTPriceFeed)\\n        external\\n        onlyWhitelistAdmin\\n    {\\n        priceFeedUSDT = AggregatorV3Interface(_newChainlinkUSDTPriceFeed);\\n        emit LogUSDTPriceFeedChange(_newChainlinkUSDTPriceFeed);\\n    }\\n\\n    /// @dev allowing resetting USDT instance, in case current contract upgrades\\n    function setUSDTInstance(address _newUsdtContract)\\n        external\\n        onlyWhitelistAdmin\\n    {\\n        usdt = IERC20(_newUsdtContract);\\n        emit LogUSDTInstanceChange(_newUsdtContract);\\n    }\\n\\n    /// @dev to extend the current closing time of private sale\\n    function extendClosingTime(uint256 _newClosingTime)\\n        external\\n        onlyWhitelistAdmin\\n    {\\n        _extendTime(_newClosingTime);\\n        emit LogPrivateSaleTimeExtension(closingTime(), _newClosingTime);\\n    }\\n\\n    /// @dev allowing users to allocate BCUBEs for themselves using ETH\\n    /// only KYC/AML whitelisted users can call this, while the sale is open and allocation hard cap is not reached\\n    /// @dev it fetches current price of ETH, multiples that by incoming ETH to calc total incoming dollar units, then\\n    /// allocates appropriate amount of BCUBE to user based on current rate, stage\\n    function buyBcubeUsingETH()\\n        external\\n        payable\\n        onlyWhitelisted\\n        onlyWhileOpen\\n        tokensRemaining\\n    {\\n        uint256 allocation;\\n        uint256 ethPrice = uint256(fetchETHPrice());\\n        uint256 dollarUnits = ethPrice.mul(msg.value).div(1e18);\\n        super._preValidatePurchase(_msgSender(), msg.value);\\n        allocation = executeAllocation(dollarUnits);\\n        _forwardFunds();\\n        emit LogBcubeBuyUsingEth(_msgSender(), msg.value, allocation);\\n    }\\n\\n    /// @dev allowing users to allocate BCUBEs for themselves using USDT\\n    /// does all things similar to the above function, but for USDT\\n    function buyBcubeUsingUSDT(uint256 incomingUsdt)\\n        external\\n        onlyWhitelisted\\n        onlyWhileOpen\\n        tokensRemaining\\n    {\\n        uint256 allocation;\\n        uint256 usdtPrice = uint256(fetchUSDTPrice());\\n        uint256 dollarUnits = usdtPrice.mul(incomingUsdt).div(1e6);\\n        super._preValidatePurchase(_msgSender(), incomingUsdt);\\n        allocation = executeAllocation(dollarUnits);\\n        usdt.safeTransferFrom(_msgSender(), wallet(), incomingUsdt);\\n        emit LogBcubeBuyUsingUsdt(_msgSender(), incomingUsdt, allocation);\\n    }\\n\\n    /// @dev stageCap is max net BCUBEs allocated until a given stage i.e. 2.5m, 5m, 7.5m, 10m for stages 1,2,3,4\\n    /// @dev based on current netAllocatedBcube, fetches rate from calcRate()\\n    /// then assigns minimum contribution for this round to minDollarUnits and checks it with the user\\n    /// then checks for net contribution to be <= $25000 for the user\\n    /// then calculates BCUBEs allocated to user from #BCUBE = rate * dollarUnits\\n    /// => #wBCUBE = ((#wBCUBE / unit dollar) for this stage) * dollarUnits\\n    /// Now, if new netAllocatedBcube does not exceed stageCap, the user is directly assigned their calculated BCUBE share\\n    /// but if it exceeds the stage cap, then the user's BCUBE share for this stage remains same until stageCap (a1),\\n    /// and the exceeding allocation is recalculated using rate of the next stage (a2)\\n    /// then a1 + a2 is allocated to the user\\n    /// Math for this can be found in the README\\n    function executeAllocation(uint256 dollarUnits) private returns (uint256) {\\n        uint256 finalAllocation;\\n        uint256 bcubeAllocatedToUser;\\n        uint256 minDollarUnits;\\n        uint256 netUserDollarUnits;\\n        uint256 rate_;\\n        uint8 stage;\\n        uint256 stageCap;\\n        uint256 a1;\\n        uint256 a2;\\n        uint256 dollarUnitsUnused;\\n        (rate_, stage) = calcRate();\\n        stageCap = 2_500_000e18 * stage;\\n        if (netAllocatedBcube <= 2_500_000e18) {\\n            minDollarUnits = 1000_0000_0000;\\n        } else if (netAllocatedBcube <= 5_000_000e18) {\\n            minDollarUnits = 500_0000_0000;\\n        } else if (netAllocatedBcube <= 7_500_000e18) {\\n            minDollarUnits = 250_0000_0000;\\n        } else if (netAllocatedBcube <= 10_000_000e18) {\\n            minDollarUnits = 100_0000_0000;\\n        }\\n        require(\\n            (minDollarUnits <= dollarUnits) && (dollarUnits <= 25000_0000_0000),\\n            \\\"Contribution range for this round exceeded\\\"\\n        );\\n        netUserDollarUnits = bcubeAllocationRegistry[_msgSender()]\\n            .dollarUnitsPayed\\n            .add(dollarUnits);\\n        require(\\n            netUserDollarUnits <= 25000_0000_0000,\\n            \\\"Contribution upper limit exceeded\\\"\\n        );\\n        bcubeAllocatedToUser = rate_.mul(dollarUnits);\\n        finalAllocation = netAllocatedBcube.add(bcubeAllocatedToUser);\\n        require(finalAllocation <= HARD_CAP, \\\"Hard cap exceeded\\\");\\n        bcubeAllocationRegistry[_msgSender()]\\n            .dollarUnitsPayed = netUserDollarUnits;\\n        if (finalAllocation <= stageCap) {\\n            netAllocatedBcube = finalAllocation;\\n            bcubeAllocationRegistry[_msgSender()]\\n                .allocatedBcube = bcubeAllocationRegistry[_msgSender()]\\n                .allocatedBcube\\n                .add(bcubeAllocatedToUser);\\n            return bcubeAllocatedToUser;\\n        } else {\\n            uint256 total;\\n            a1 = stageCap.sub(netAllocatedBcube);\\n            dollarUnitsUnused = dollarUnits.sub(a1.div(rate_));\\n            netAllocatedBcube = stageCap;\\n            (rate_, stage) = calcRate();\\n            a2 = dollarUnitsUnused.mul(rate_);\\n            netAllocatedBcube = netAllocatedBcube.add(a2);\\n            total = a1.add(a2);\\n            bcubeAllocationRegistry[_msgSender()]\\n                .allocatedBcube = bcubeAllocationRegistry[_msgSender()]\\n                .allocatedBcube\\n                .add(total);\\n            return total;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb53c2016d428215fa21b5b37386402740c15d1fc4cb75dde0542994b0f4889a2\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./BCUBEPrivateSale.sol\\\";\\n\\n/**\\n * @title BCUBE Treasury\\n * @notice Contract in which 50m BCUBE will be minted after private sale,\\n * and distributed to stakeholders, in vested manner to whomever applicable\\n * @author Smit Rajput @ b-cube.ai\\n **/\\n\\ncontract Treasury is BCUBEPrivateSale {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @param shareWithdrawn amount of allocated BCUBEs withdrawn\\n    /// @param currentAllowance amount of BCUBE that can be claimed from treasury increases 25% per 6 months (vesting),\\n    /// currentAllowance tracks this increasing allowance\\n    /// @param increaseInAllowance 25% of net allocation. By which currentAllowance increases per 6 months\\n    struct Advisor {\\n        uint256 increaseInAllowance;\\n        uint256 currentAllowance;\\n        uint256 shareWithdrawn;\\n    }\\n\\n    mapping(address => Advisor) public advisors;\\n\\n    /// @notice team, devFund shares, like advisors' share are also vested, hence have their allowance\\n    /// trackers similar to advisors', along with BCUBEs withdrawn tracker\\n    uint256 public teamShareWithdrawn;\\n    uint256 public teamAllowance;\\n    uint256 public devFundShareWithdrawn;\\n    uint256 public devFundAllowance;\\n\\n    /// @notice reserves, community, bounty, publicSale share of BCUBEs are not vested and only have their\\n    /// BCUBEs withdrawn trackers\\n    uint256 public reservesWithdrawn;\\n    uint256 public communityShareWithdrawn;\\n    uint256 public bountyWithdrawn;\\n    uint256 public publicSaleShareWithdrawn;\\n\\n    /// @notice timestamp at which BCUBE will be listed on CEXes/DEXes\\n    uint256 public listingTime;\\n\\n    event LogEtherReceived(address indexed sender, uint256 value);\\n    event LogListingTimeChange(uint256 prevListingTime, uint256 newListingTime);\\n    event LogAdvisorAddition(\\n        address indexed newAdvisor,\\n        uint256 newNetAllowance\\n    );\\n    event LogAdvisorAllowanceChange(\\n        address indexed advisor,\\n        uint256 prevNetAllowance,\\n        uint256 newNetAllowance\\n    );\\n    event LogAdvisorRemoval(address indexed removedAdvisor);\\n    event LogAdvisorShareWithdrawn(\\n        address indexed advisor,\\n        uint256 bcubeAmountWithdrawn\\n    );\\n    event LogTeamShareWithdrawn(uint256 bcubeAmountWithdrawn);\\n    event LogDevFundShareWithdrawn(uint256 bcubeAmountWithdrawn);\\n    event LogReservesShareWithdrawn(uint256 bcubeAmountWithdrawn);\\n    event LogCommunityShareWithdrawn(uint256 bcubeAmountWithdrawn);\\n    event LogBountyShareWithdrawn(uint256 bcubeAmountWithdrawn);\\n    event LogPublicSaleShareWithdrawn(uint256 bcubeAmountWithdrawn);\\n    event LogPrivateSaleShareWithdrawn(\\n        address indexed participant,\\n        uint256 bcubeAmountWithdrawn\\n    );\\n\\n    /// @dev wallet() is team's address, declared in the parent Crowdsale contract\\n    modifier onlyTeam() {\\n        require(_msgSender() == wallet(), \\\"Only team can call\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfterListing() {\\n        require(now >= listingTime, \\\"Only callable after listing\\\");\\n        _;\\n    }\\n\\n    function() external payable {\\n        emit LogEtherReceived(_msgSender(), msg.value);\\n    }\\n\\n    /// @param wallet_ team's address which controls all BCUBEs except private sale share\\n    constructor(\\n        address payable wallet_,\\n        IERC20 token_,\\n        uint256 openingTime_,\\n        uint256 closingTime_,\\n        address _chainlinkETHPriceFeed,\\n        address _chainlinkUSDTPriceFeed,\\n        address _usdtContract,\\n        uint256 _listingTime\\n    )\\n        public\\n        BCUBEPrivateSale(\\n            wallet_,\\n            token_,\\n            openingTime_,\\n            closingTime_,\\n            _chainlinkETHPriceFeed,\\n            _chainlinkUSDTPriceFeed,\\n            _usdtContract\\n        )\\n    {\\n        listingTime = _listingTime;\\n    }\\n\\n    /// @dev WhitelistAdmin is the deployer\\n    /// @dev allows deployer to change listingTime, before current listingTime\\n    function setListingTime(uint256 _startTime) external onlyWhitelistAdmin {\\n        require(now < listingTime, \\\"listingTime unchangable after listing\\\");\\n        uint256 prevListingTime = listingTime;\\n        listingTime = _startTime;\\n        emit LogListingTimeChange(prevListingTime, listingTime);\\n    }\\n\\n    function addAdvisor(address _newAdvisor, uint256 _netAllowance)\\n        external\\n        onlyWhitelistAdmin\\n    {\\n        require(_newAdvisor != address(0), \\\"Invalid advisor address\\\");\\n        advisors[_newAdvisor].increaseInAllowance = _netAllowance.div(4);\\n        emit LogAdvisorAddition(_newAdvisor, _netAllowance);\\n    }\\n\\n    /// @dev allows deployer to change net allowance of existing advisor\\n    function setAdvisorAllowance(address _advisor, uint256 _newNetAllowance)\\n        external\\n        onlyWhitelistAdmin\\n    {\\n        uint256 prevNetAllowance;\\n        require(advisors[_advisor].increaseInAllowance > 0, \\\"Invalid advisor\\\");\\n        prevNetAllowance = advisors[_advisor].increaseInAllowance.mul(4);\\n        advisors[_advisor].increaseInAllowance = _newNetAllowance.div(4);\\n        emit LogAdvisorAllowanceChange(\\n            _advisor,\\n            prevNetAllowance,\\n            _newNetAllowance\\n        );\\n    }\\n\\n    function removeAdvisor(address _advisor) external onlyWhitelistAdmin {\\n        require(advisors[_advisor].increaseInAllowance > 0, \\\"Invalid advisor\\\");\\n        delete advisors[_advisor];\\n        emit LogAdvisorRemoval(_advisor);\\n    }\\n\\n    /// @dev allows existing advisors to withdraw their share of BCUBEs,\\n    /// 25% per 6 months, after listingTime\\n    function advisorShareWithdraw(uint256 bcubeAmount)\\n        external\\n        onlyAfterListing\\n    {\\n        uint256 allowance;\\n        require(advisors[_msgSender()].increaseInAllowance > 0, \\\"!advisor\\\");\\n        uint256 increase = advisors[_msgSender()].increaseInAllowance;\\n        if (now >= listingTime + 104 weeks) allowance = increase.mul(4);\\n        else if (now >= listingTime + 78 weeks) allowance = increase.mul(3);\\n        else if (now >= listingTime + 52 weeks) allowance = increase.mul(2);\\n        else if (now >= listingTime + 26 weeks) allowance = increase;\\n        if (allowance != advisors[_msgSender()].currentAllowance)\\n            advisors[_msgSender()].currentAllowance = allowance;\\n        uint256 finalAdvisorShareWithdrawn;\\n        finalAdvisorShareWithdrawn = advisors[_msgSender()].shareWithdrawn.add(\\n            bcubeAmount\\n        );\\n        require(\\n            finalAdvisorShareWithdrawn <=\\n                advisors[_msgSender()].currentAllowance,\\n            \\\"Out of advisor share\\\"\\n        );\\n        advisors[_msgSender()].shareWithdrawn = finalAdvisorShareWithdrawn;\\n        token().safeTransfer(_msgSender(), bcubeAmount);\\n        emit LogAdvisorShareWithdrawn(_msgSender(), bcubeAmount);\\n    }\\n\\n    /// @dev allows team to withdraw devFund share of BCUBEs,\\n    /// 25% of 7.5m, per 6 months, after listingTime\\n    function devFundShareWithdraw(uint256 bcubeAmount)\\n        external\\n        onlyTeam\\n        onlyAfterListing\\n    {\\n        uint256 allowance;\\n        if (now >= listingTime + 104 weeks) allowance = 1_875_000e18 * 4;\\n        else if (now >= listingTime + 78 weeks) allowance = 1_875_000e18 * 3;\\n        else if (now >= listingTime + 52 weeks) allowance = 1_875_000e18 * 2;\\n        else if (now >= listingTime + 26 weeks) allowance = 1_875_000e18;\\n        if (allowance != devFundAllowance) devFundAllowance = allowance;\\n        uint256 finalDevFundShareWithdrawn;\\n        finalDevFundShareWithdrawn = devFundShareWithdrawn.add(bcubeAmount);\\n        require(\\n            finalDevFundShareWithdrawn <= devFundAllowance,\\n            \\\"Out of dev fund share\\\"\\n        );\\n        devFundShareWithdrawn = finalDevFundShareWithdrawn;\\n        token().safeTransfer(wallet(), bcubeAmount);\\n        emit LogDevFundShareWithdrawn(bcubeAmount);\\n    }\\n\\n    /// @dev allows team to withdraw their share of BCUBEs,\\n    /// 12.5% of 5m, per 6 months, after listingTime\\n    function teamShareWithdraw(uint256 bcubeAmount)\\n        external\\n        onlyTeam\\n        onlyAfterListing\\n    {\\n        uint256 allowance;\\n        if (now >= listingTime + 208 weeks) allowance = 625_000e18 * 8;\\n        else if (now >= listingTime + 182 weeks) allowance = 625_000e18 * 7;\\n        else if (now >= listingTime + 156 weeks) allowance = 625_000e18 * 6;\\n        else if (now >= listingTime + 130 weeks) allowance = 625_000e18 * 5;\\n        else if (now >= listingTime + 104 weeks) allowance = 625_000e18 * 4;\\n        else if (now >= listingTime + 78 weeks) allowance = 625_000e18 * 3;\\n        else if (now >= listingTime + 52 weeks) allowance = 625_000e18 * 2;\\n        else if (now >= listingTime + 26 weeks) allowance = 625_000e18;\\n        if (allowance != teamAllowance) teamAllowance = allowance;\\n        uint256 finalTeamShareWithdrawn;\\n        finalTeamShareWithdrawn = teamShareWithdrawn.add(bcubeAmount);\\n        require(finalTeamShareWithdrawn <= teamAllowance, \\\"Out of team share\\\");\\n        teamShareWithdrawn = finalTeamShareWithdrawn;\\n        token().safeTransfer(wallet(), bcubeAmount);\\n        emit LogTeamShareWithdrawn(bcubeAmount);\\n    }\\n\\n    /// @dev allows team to withdraw reserves share of BCUBEs i.e. 7m after listingTime\\n    function reservesShareWithdraw(uint256 bcubeAmount)\\n        external\\n        onlyTeam\\n        onlyAfterListing\\n    {\\n        shareWithdraw(\\n            bcubeAmount,\\n            reservesWithdrawn,\\n            7_000_000e18,\\n            \\\"Out of reserves share\\\",\\n            0\\n        );\\n        emit LogReservesShareWithdrawn(bcubeAmount);\\n    }\\n\\n    /// @dev allows team to withdraw community share of BCUBEs i.e. 2.5m\\n    function communityShareWithdraw(uint256 bcubeAmount) external onlyTeam {\\n        shareWithdraw(\\n            bcubeAmount,\\n            communityShareWithdrawn,\\n            2_500_000e18,\\n            \\\"Out of community share\\\",\\n            1\\n        );\\n        emit LogCommunityShareWithdrawn(bcubeAmount);\\n    }\\n\\n    /// @dev allows team to withdraw bounty share of BCUBEs i.e. 0.5m\\n    function bountyShareWithdraw(uint256 bcubeAmount) external onlyTeam {\\n        shareWithdraw(\\n            bcubeAmount,\\n            bountyWithdrawn,\\n            500_000e18,\\n            \\\"Out of bounty share\\\",\\n            2\\n        );\\n        emit LogBountyShareWithdrawn(bcubeAmount);\\n    }\\n\\n    /// @dev allows team to withdraw publicSale share of BCUBEs i.e. 25m - (netAllocatedBcube in private sale)\\n    function publicSaleShareWithdraw(uint256 bcubeAmount) external onlyTeam {\\n        shareWithdraw(\\n            bcubeAmount,\\n            publicSaleShareWithdrawn,\\n            25_000_000e18 - netAllocatedBcube,\\n            \\\"Out of publicSale share\\\",\\n            3\\n        );\\n        emit LogPublicSaleShareWithdrawn(bcubeAmount);\\n    }\\n\\n    /// @dev common function which handles withdrawals for the immediate above 4 functions\\n    /// it checks if the amount being withdrawn is below the allocated share, then updates the\\n    /// appropriate tracker and performs the transfer\\n    function shareWithdraw(\\n        uint256 bcubeAmount,\\n        uint256 specificShareWithdrawn,\\n        uint256 cap,\\n        string memory errMsg,\\n        uint256 flag\\n    ) private {\\n        uint256 finalShareWithdrawn;\\n        finalShareWithdrawn = specificShareWithdrawn.add(bcubeAmount);\\n        require(finalShareWithdrawn <= cap, errMsg);\\n        if (flag == 0) reservesWithdrawn = finalShareWithdrawn;\\n        else if (flag == 1) communityShareWithdrawn = finalShareWithdrawn;\\n        else if (flag == 2) bountyWithdrawn = finalShareWithdrawn;\\n        else if (flag == 3) publicSaleShareWithdrawn = finalShareWithdrawn;\\n        token().safeTransfer(wallet(), bcubeAmount);\\n    }\\n\\n    /// @dev allows private sale participants to withdraw their allocated share of\\n    /// BCUBEs, 25% per 30 days, after listingTime\\n    function privateSaleShareWithdraw(uint256 bcubeAmount)\\n        external\\n        onlyAfterListing\\n    {\\n        require(\\n            bcubeAllocationRegistry[_msgSender()].allocatedBcube > 0,\\n            \\\"!privateSaleParticipant || 0 BCUBE allocated\\\"\\n        );\\n        uint256 allowance;\\n        uint256 increase =\\n            bcubeAllocationRegistry[_msgSender()].allocatedBcube.div(4);\\n        if (now >= listingTime + 120 days) allowance = increase * 4;\\n        else if (now >= listingTime + 90 days) allowance = increase * 3;\\n        else if (now >= listingTime + 60 days) allowance = increase * 2;\\n        else if (now >= listingTime + 30 days) allowance = increase;\\n        if (allowance != bcubeAllocationRegistry[_msgSender()].currentAllowance)\\n            bcubeAllocationRegistry[_msgSender()].currentAllowance = allowance;\\n        uint256 finalPSSWithdrawn;\\n        finalPSSWithdrawn = bcubeAllocationRegistry[_msgSender()]\\n            .shareWithdrawn\\n            .add(bcubeAmount);\\n        require(\\n            finalPSSWithdrawn <=\\n                bcubeAllocationRegistry[_msgSender()].currentAllowance,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        bcubeAllocationRegistry[_msgSender()]\\n            .shareWithdrawn = finalPSSWithdrawn;\\n        token().safeTransfer(_msgSender(), bcubeAmount);\\n        emit LogPrivateSaleShareWithdrawn(_msgSender(), bcubeAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdbe0bdc16cab4fc6d8bfd4618065671a1c4ea9d557d953ffbf981c75c8c00ff\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003f9c38038062003f9c83398181016040526101008110156200003857600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959694959394929391929091878787878787878484600189896200009e6200008f6001600160e01b03620002ab16565b6001600160e01b03620002af16565b6002805460ff1916600117905582620000fe576040805162461bcd60e51b815260206004820152601460248201527f43726f776473616c653a20726174652069732030000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216620001455760405162461bcd60e51b815260040180806020018281038252602581526020018062003f776025913960400191505060405180910390fd5b6001600160a01b0381166200018c5760405162461bcd60e51b815260040180806020018281038252602481526020018062003f316024913960400191505060405180910390fd5b600492909255600380546001600160a01b039283166001600160a01b0319909116179055600280549190921661010002610100600160a81b0319909116179055428210156200020d5760405162461bcd60e51b815260040180806020018281038252603381526020018062003ec76033913960400191505060405180910390fd5b8181116200024d5760405162461bcd60e51b815260040180806020018281038252603781526020018062003efa6037913960400191505060405180910390fd5b600691909155600755600a80546001600160a01b039485166001600160a01b031991821617909155600b805493851693821693909317909255600c805491909316911617905550505060169190915550620003f79650505050505050565b3390565b620002ca8160006200030160201b6200322d1790919060201c565b6040516001600160a01b038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b6200031682826001600160e01b036200038e16565b1562000369576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b038216620003d75760405162461bcd60e51b815260040180806020018281038252602281526020018062003f556022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b613ac080620004076000396000f3fe6080604052600436106102e45760003560e01c80636ed7702411610190578063b822b96f116100dc578063ec8ac4d811610095578063f9169a7a1161006f578063f9169a7a14610a0e578063f983727b14610a23578063fa04c8ca14610a38578063fc0c546a14610a4d576102e4565b8063ec8ac4d814610956578063f54575d61461097c578063f7d8c2c2146109b5576102e4565b8063b822b96f1461086c578063bb5f747b14610896578063c015889b146108c9578063d0febe4c14610902578063d6cd947314610917578063e131d7351461092c576102e4565b80639e40ee5d11610149578063af43363811610123578063af43363814610803578063b02dbd0714610818578063b3f0d3331461082d578063b7a8807c14610857576102e4565b80639e40ee5d1461079a578063a5075a0d146107af578063a8b9731a146107d9576102e4565b80636ed77024146106ba5780637362d9c8146106ed5780637af32311146107205780637b8751141461073557806390d137f61461076857806394e1426514610792576102e4565b80633e2640d61161024f5780634c5a628c116102085780635c9599de116101e25780635c9599de1461063357806369f61039146106485780636b226b6c1461067b5780636ea2d99814610690576102e4565b80634c5a628c146105df578063521eb273146105f45780635c88957514610609576102e4565b80633e2640d6146105375780634042b66f1461056157806340a2795e1461057657806341b200471461058b57806347535d7b146105b55780634b6753bc146105ca576102e4565b80632f48ab7d116102a15780632f48ab7d1461046a57806333b147421461049b578063352ba579146104b05780633a03171c146104c55780633af32abf146104da5780633c3bebc51461050d576102e4565b806303ca0f6c1461032e5780630eeccb841461037f57806310154bad146103b45780631515bc2b146103e7578063291d9549146104105780632c4e722e14610443575b6102ec610a62565b6001600160a01b03167f8cd787b71532f662d581f9ea765379c7759950cd7dedb590bc8f6f7b454bd5ed346040518082815260200191505060405180910390a2005b34801561033a57600080fd5b506103616004803603602081101561035157600080fd5b50356001600160a01b0316610a66565b60408051938452602084019290925282820152519081900360600190f35b34801561038b57600080fd5b506103b2600480360360208110156103a257600080fd5b50356001600160a01b0316610a87565b005b3480156103c057600080fd5b506103b2600480360360208110156103d757600080fd5b50356001600160a01b0316610b7f565b3480156103f357600080fd5b506103fc610bd1565b604080519115158252519081900360200190f35b34801561041c57600080fd5b506103b26004803603602081101561043357600080fd5b50356001600160a01b0316610bd9565b34801561044f57600080fd5b50610458610c28565b60408051918252519081900360200190f35b34801561047657600080fd5b5061047f610c77565b604080516001600160a01b039092168252519081900360200190f35b3480156104a757600080fd5b50610458610c86565b3480156104bc57600080fd5b50610458610c8c565b3480156104d157600080fd5b50610458610c92565b3480156104e657600080fd5b506103fc600480360360208110156104fd57600080fd5b50356001600160a01b0316610ca1565b34801561051957600080fd5b506103b26004803603602081101561053057600080fd5b5035610cbc565b34801561054357600080fd5b506103b26004803603602081101561055a57600080fd5b5035610daf565b34801561056d57600080fd5b50610458610e41565b34801561058257600080fd5b50610458610e47565b34801561059757600080fd5b506103b2600480360360208110156105ae57600080fd5b5035610e4d565b3480156105c157600080fd5b506103fc610f79565b3480156105d657600080fd5b50610458610f94565b3480156105eb57600080fd5b506103b2610f9a565b34801561060057600080fd5b5061047f610fac565b34801561061557600080fd5b506103b26004803603602081101561062c57600080fd5b5035610fbb565b34801561063f57600080fd5b50610458611246565b34801561065457600080fd5b506103b26004803603602081101561066b57600080fd5b50356001600160a01b031661124c565b34801561068757600080fd5b506104586112dc565b34801561069c57600080fd5b506103b2600480360360208110156106b357600080fd5b50356112e2565b3480156106c657600080fd5b506103b2600480360360208110156106dd57600080fd5b50356001600160a01b03166115d8565b3480156106f957600080fd5b506103b26004803603602081101561071057600080fd5b50356001600160a01b0316611668565b34801561072c57600080fd5b506104586116b7565b34801561074157600080fd5b506103b26004803603602081101561075857600080fd5b50356001600160a01b03166116bd565b34801561077457600080fd5b506103b26004803603602081101561078b57600080fd5b503561174d565b6103b2611831565b3480156107a657600080fd5b506104586119da565b3480156107bb57600080fd5b506103b2600480360360208110156107d257600080fd5b5035611a60565b3480156107e557600080fd5b506103b2600480360360208110156107fc57600080fd5b5035611c19565b34801561080f57600080fd5b50610458611e06565b34801561082457600080fd5b50610458611e0c565b34801561083957600080fd5b506103b26004803603602081101561085057600080fd5b5035611e12565b34801561086357600080fd5b50610458611efa565b34801561087857600080fd5b506103b26004803603602081101561088f57600080fd5b5035611f00565b3480156108a257600080fd5b506103fc600480360360208110156108b957600080fd5b50356001600160a01b03166121eb565b3480156108d557600080fd5b506103b2600480360360408110156108ec57600080fd5b506001600160a01b0381351690602001356121fd565b34801561090e57600080fd5b5061045861233b565b34801561092357600080fd5b506103b2612374565b34801561093857600080fd5b506103b26004803603602081101561094f57600080fd5b5035612384565b6103b26004803603602081101561096c57600080fd5b50356001600160a01b0316612451565b34801561098857600080fd5b506103b26004803603604081101561099f57600080fd5b506001600160a01b038135169060200135612573565b3480156109c157600080fd5b506109e8600480360360208110156109d857600080fd5b50356001600160a01b031661267b565b604080519485526020850193909352838301919091526060830152519081900360800190f35b348015610a1a57600080fd5b506104586126a2565b348015610a2f57600080fd5b506104586126a8565b348015610a4457600080fd5b506104586126ae565b348015610a5957600080fd5b5061047f61276b565b3390565b600d6020526000908152604090208054600182015460029092015490919083565b610a97610a92610a62565b6121eb565b610ad25760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b6001600160a01b0381166000908152600d6020526040902054610b2e576040805162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b23b34b9b7b960891b604482015290519081900360640190fd5b6001600160a01b0381166000818152600d602052604080822082815560018101839055600201829055517f6298d302ce5f4bab7a4009d80433bf2548a274df2564257476d97c940e6897b29190a250565b610b8a610a92610a62565b610bc55760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b610bce8161277f565b50565b600754421190565b610be4610a92610a62565b610c1f5760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b610bce816127c7565b6040805162461bcd60e51b815260206004820152601f60248201527f42437562655072697661746553616c653a207261746528292063616c6c6564006044820152905160009181900360640190fd5b600c546001600160a01b031681565b60165481565b60145481565b6a084595161401484a00000081565b6000610cb460018363ffffffff61280f16565b90505b919050565b610cc4610fac565b6001600160a01b0316610cd5610a62565b6001600160a01b031614610d25576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b610d79816015546009546a14adf4b7320334b9000000036040518060400160405280601781526020017f4f7574206f66207075626c696353616c65207368617265000000000000000000815250600361287a565b6040805182815290517fb334e86d86ec6fee4740b72723594b042696df8b2078c1510e0ff889071160ed9181900360200190a150565b610dba610a92610a62565b610df55760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b610dfe8161297c565b7f3fb76bf02dd0aeceab93b43bc4c039089f0b7578dcbfb81d2a904ece318a87d0610e27610f94565b60408051918252602082018490528051918290030190a150565b60055490565b600e5481565b610e55610fac565b6001600160a01b0316610e66610a62565b6001600160a01b031614610eb6576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b601654421015610efb576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b610f43816012546a05ca4ec2a79a7f67000000604051806040016040528060158152602001744f7574206f6620726573657276657320736861726560581b815250600061287a565b6040805182815290517f16c8b3ea61a43f4b49b7697830aab88eb77ceb2c2dc1ae5f59cb2be86b0b85ba9181900360200190a150565b60006006544210158015610f8f57506007544211155b905090565b60075490565b610faa610fa5610a62565b612a58565b565b6003546001600160a01b031690565b610fc3610fac565b6001600160a01b0316610fd4610a62565b6001600160a01b031614611024576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b601654421015611069576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b600060165463077f880001421061108c57506a0422ca8b0a00a42500000061116d565b60165463068f97000142106110ad57506a039e7139a8c08fa060000061116d565b60165463059fa6000142106110ce57506a031a17e847807b1bc0000061116d565b6016546304afb5000142106110ef57506a0295be96e640669720000061116d565b6016546303bfc40001421061111057506a021165458500521280000061116d565b6016546302cfd30001421061113157506a018d0bf423c03d8de0000061116d565b6016546301dfe20001421061115257506a0108b2a2c280290940000061116d565b60165462eff10001421061116d57506984595161401484a000005b600f54811461117c57600f8190555b600e54600090611192908463ffffffff612aa016565b9050600f548111156111df576040805162461bcd60e51b81526020600482015260116024820152704f7574206f66207465616d20736861726560781b604482015290519081900360640190fd5b600e81905561120e6111ef610fac565b846111f861276b565b6001600160a01b0316919063ffffffff612b0116565b6040805184815290517ff26632d6507893828e9976809970a5a6835d929f140bb32f2369012ef809985d9181900360200190a1505050565b60115481565b611257610a92610a62565b6112925760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b600c80546001600160a01b0319166001600160a01b0383169081179091556040517fac2db933594c5083197a72b940a989b91a7001b86f20a7ad67095c54239bae0b90600090a250565b60135481565b601654421015611327576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b600060086000611335610a62565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010154116113955760405162461bcd60e51b815260040180806020018281038252602c815260200180613862602c913960400191505060405180910390fd5b6000806113d26004600860006113a9610a62565b6001600160a01b031681526020810191909152604001600020600101549063ffffffff612b5816565b9050601654629e34000142106113ed57806004029150611431565b6016546276a70001421061140657806003029150611431565b601654624f1a0001421061141f57806002029150611431565b60165462278d00014210611431578091505b6008600061143d610a62565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201548214611492578160086000611474610a62565b6001600160a01b031681526020810191909152604001600020600201555b60006114cd84600860006114a4610a62565b6001600160a01b031681526020810191909152604001600020600301549063ffffffff612aa016565b9050600860006114db610a62565b6001600160a01b03166001600160a01b031681526020019081526020016000206002015481111561154c576040805162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b604482015290519081900360640190fd5b8060086000611559610a62565b6001600160a01b0316815260208101919091526040016000206003015561158a611581610a62565b856111f861276b565b611592610a62565b6001600160a01b03167f845fb39b5b60bc9f899236606f87e43e7d4ec84f6fe7255e158cb5cae8d62147856040518082815260200191505060405180910390a250505050565b6115e3610a92610a62565b61161e5760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b600b80546001600160a01b0319166001600160a01b0383169081179091556040517fd8fbae2ea5968d1f413f3c548aac18b3ebab988ff71c886d37822db6593d66b990600090a250565b611673610a92610a62565b6116ae5760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b610bce81612b9a565b60105481565b6116c8610a92610a62565b6117035760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f736ca4159357d1cbf704728e18931af966772d5708578447e6e9093b90668aab90600090a250565b611755610fac565b6001600160a01b0316611766610a62565b6001600160a01b0316146117b6576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b6117fb816014546969e10de76676d0800000604051806040016040528060138152602001724f7574206f6620626f756e747920736861726560681b815250600261287a565b6040805182815290517fd59808818ea399dc1f6f392a7a6adc6687486ee856e1d336f917dbc22783dafb9181900360200190a150565b61184161183c610a62565b610ca1565b61187c5760405162461bcd60e51b815260040180806020018281038252603a8152602001806139b9603a913960400191505060405180910390fd5b611884610f79565b6118d0576040805162461bcd60e51b81526020600482015260186024820152772a34b6b2b221b937bbb239b0b6329d103737ba1037b832b760411b604482015290519081900360640190fd5b6a084595161401484a00000060095410611928576040805162461bcd60e51b8152602060048201526014602482015273105b1b081d1bdad95b9cc8185b1b1bd8d85d195960621b604482015290519081900360640190fd5b6000806119336119da565b9050600061195f670de0b6b3a7640000611953843463ffffffff612be216565b9063ffffffff612b5816565b905061197261196c610a62565b34612c3b565b61197b81612c8d565b9250611985613012565b61198d610a62565b6001600160a01b03167fe23d136c8a147edd57f9cb65571186cacad0b34301c4785d3cf49dbad8b316c73485604051808381526020018281526020019250505060405180910390a2505050565b600080600a60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611a2b57600080fd5b505afa158015611a3f573d6000803e3d6000fd5b505050506040513d60a0811015611a5557600080fd5b506020015191505090565b611a6b61183c610a62565b611aa65760405162461bcd60e51b815260040180806020018281038252603a8152602001806139b9603a913960400191505060405180910390fd5b611aae610f79565b611afa576040805162461bcd60e51b81526020600482015260186024820152772a34b6b2b221b937bbb239b0b6329d103737ba1037b832b760411b604482015290519081900360640190fd5b6a084595161401484a00000060095410611b52576040805162461bcd60e51b8152602060048201526014602482015273105b1b081d1bdad95b9cc8185b1b1bd8d85d195960621b604482015290519081900360640190fd5b600080611b5d6126ae565b90506000611b78620f4240611953848763ffffffff612be216565b9050611b8b611b85610a62565b85612c3b565b611b9481612c8d565b9250611bc3611ba1610a62565b611ba9610fac565b600c546001600160a01b031691908763ffffffff61304b16565b611bcb610a62565b6001600160a01b03167f5bd5fa9268384c2ce0efa4eadd3467d081f25e7b77e13153712be145940c6c878585604051808381526020018281526020019250505060405180910390a250505050565b611c21610fac565b6001600160a01b0316611c32610a62565b6001600160a01b031614611c82576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b601654421015611cc7576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b60006016546303bfc400014210611cea57506a06342fd08f00f637800000611d48565b6016546302cfd300014210611d0b57506a04a723dc6b40b8a9a00000611d48565b6016546301dfe200014210611d2c57506a031a17e847807b1bc00000611d48565b60165462eff100014210611d4857506a018d0bf423c03d8de000005b6011548114611d575760118190555b601054600090611d6d908463ffffffff612aa016565b9050601154811115611dbe576040805162461bcd60e51b81526020600482015260156024820152744f7574206f66206465762066756e6420736861726560581b604482015290519081900360640190fd5b6010819055611dce6111ef610fac565b6040805184815290517f508ce4df5cb712355b1838ebe7960f1c5fa233089109a878ad0f18a967731f839181900360200190a1505050565b60155481565b600f5481565b611e1a610fac565b6001600160a01b0316611e2b610a62565b6001600160a01b031614611e7b576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b611ec4816013546a0211654585005212800000604051806040016040528060168152602001754f7574206f6620636f6d6d756e69747920736861726560501b815250600161287a565b6040805182815290517f0594920c4254328af12b1023920cfff58872cafff2fd66d1d817476bb6d031fc9181900360200190a150565b60065490565b601654421015611f45576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b600080600d6000611f54610a62565b6001600160a01b0316815260208101919091526040016000205411611fab576040805162461bcd60e51b815260206004820152600860248201526710b0b23b34b9b7b960c11b604482015290519081900360640190fd5b6000600d6000611fb9610a62565b6001600160a01b031681526020810191909152604001600020546016549091506303bfc400014210611ffd57611ff681600463ffffffff612be216565b915061204f565b6016546302cfd30001421061201d57611ff681600363ffffffff612be216565b6016546301dfe20001421061203d57611ff681600263ffffffff612be216565b60165462eff10001421061204f578091505b600d600061205b610a62565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015482146120b05781600d6000612092610a62565b6001600160a01b031681526020810191909152604001600020600101555b60006120eb84600d60006120c2610a62565b6001600160a01b031681526020810191909152604001600020600201549063ffffffff612aa016565b9050600d60006120f9610a62565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010154811115612168576040805162461bcd60e51b81526020600482015260146024820152734f7574206f662061647669736f7220736861726560601b604482015290519081900360640190fd5b80600d6000612175610a62565b6001600160a01b0316815260208101919091526040016000206002015561219d611581610a62565b6121a5610a62565b6001600160a01b03167f83daae824bbbbfe48150a95968b3e11ea42986b7ed680da649d4045cf979ba5e856040518082815260200191505060405180910390a250505050565b6000610cb4818363ffffffff61280f16565b612208610a92610a62565b6122435760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b6001600160a01b0382166000908152600d602052604081205461229f576040805162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b23b34b9b7b960891b604482015290519081900360640190fd5b6001600160a01b0383166000908152600d60205260409020546122c990600463ffffffff612be216565b90506122dc82600463ffffffff612b5816565b6001600160a01b0384166000818152600d6020908152604091829020939093558051848152928301859052805191927f1cfb75aad73a4e1eb81a4f24427f023bbcc8c11f9454a2cc9aa653ca8b6a5e12929081900390910190a2505050565b600060405162461bcd60e51b81526004018080602001828103825260248152602001806137f36024913960400191505060405180910390fd5b610faa61237f610a62565b6127c7565b61238f610a92610a62565b6123ca5760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b601654421061240a5760405162461bcd60e51b8152600401808060200182810382526025815260200180613a676025913960400191505060405180910390fd5b6016805490829055604080518281526020810184905281517f718791b3330ed4ee60d5ad30aca426a54ec7062bd224681d168dbf222db6c677929181900390910190a15050565b60025460ff166124a8576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805460ff19169055346124bd8282612c3b565b60006124c8826130ab565b6005549091506124de908363ffffffff612aa016565b6005556124eb83826130c2565b826001600160a01b03166124fd610a62565b6001600160a01b03167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a361254f8383612c89565b612557613012565b6125618383612c89565b50506002805460ff1916600117905550565b61257e610a92610a62565b6125b95760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b6001600160a01b038216612614576040805162461bcd60e51b815260206004820152601760248201527f496e76616c69642061647669736f722061646472657373000000000000000000604482015290519081900360640190fd5b61262581600463ffffffff612b5816565b6001600160a01b0383166000818152600d6020908152604091829020939093558051848152905191927fc56faf057c0642115e9d238198d1c9185ba17968fce92c3f01263cf12475c7a692918290030190a25050565b60086020526000908152604090208054600182015460028301546003909301549192909184565b60125481565b60095481565b600080600b60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156126ff57600080fd5b505afa158015612713573d6000803e3d6000fd5b505050506040513d60a081101561272957600080fd5b50602001519050600061273a6119da565b9050612764670de0b6b3a7640000612758848463ffffffff6130cc16565b9063ffffffff61317516565b9250505090565b60025461010090046001600160a01b031690565b61279060018263ffffffff61322d16565b6040516001600160a01b038216907fee1504a83b6d4a361f4c1dc78ab59bfa30d6a3b6612c403e86bb01ef2984295f90600090a250565b6127d860018263ffffffff6132ae16565b6040516001600160a01b038216907f270d9b30cf5b0793bbfd54c9d5b94aeb49462b8148399000265144a8722da6b690600090a250565b60006001600160a01b0382166128565760405162461bcd60e51b81526004018080602001828103825260228152602001806139306022913960400191505060405180910390fd5b506001600160a01b03811660009081526020839052604090205460ff165b92915050565b600061288c858763ffffffff612aa016565b9050828482111561291b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128e05781810151838201526020016128c8565b50505050905090810190601f16801561290d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508161292b576012819055612960565b816001141561293e576013819055612960565b8160021415612951576014819055612960565b81600314156129605760158190555b61297461296b610fac565b876111f861276b565b505050505050565b612984610bd1565b156129d6576040805162461bcd60e51b815260206004820152601e60248201527f54696d656443726f776473616c653a20616c726561647920636c6f7365640000604482015290519081900360640190fd5b6007548111612a165760405162461bcd60e51b815260040180806020018281038252603f8152602001806138d0603f913960400191505060405180910390fd5b600754604080519182526020820183905280517f46711e222f558a07afd26e5e71b48ecb0a8b2cdcd40faeb1323e05e2c76a2f329281900390910190a1600755565b612a6960008263ffffffff6132ae16565b6040516001600160a01b038216907f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16590600090a250565b600082820183811015612afa576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612b53908490613315565b505050565b6000612afa83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506134cd565b612bab60008263ffffffff61322d16565b6040516001600160a01b038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b600082612bf157506000612874565b82820282848281612bfe57fe5b0414612afa5760405162461bcd60e51b815260040180806020018281038252602181526020018061390f6021913960400191505060405180910390fd5b612c4482610ca1565b612c7f5760405162461bcd60e51b81526004018080602001828103825260418152602001806137b26041913960600191505060405180910390fd5b612c898282613532565b5050565b6000806000806000806000806000806000612ca6613590565b80965081975050508460ff166a0211654585005212800000026affffffffffffffffffffff1693506a021165458500521280000060095411612cef5764174876e8009750612d4e565b6a0422ca8b0a00a42500000060095411612d1057640ba43b74009750612d4e565b6a06342fd08f00f63780000060095411612d31576405d21dba009750612d4e565b6a084595161401484a00000060095411612d4e576402540be40097505b8b8811158015612d645750650246139ca8008c11155b612d9f5760405162461bcd60e51b815260040180806020018281038252602a815260200180613838602a913960400191505060405180910390fd5b612dd58c60086000612daf610a62565b6001600160a01b031681526020810191909152604001600020549063ffffffff612aa016565b9650650246139ca800871115612e1c5760405162461bcd60e51b81526004018080602001828103825260218152602001806138176021913960400191505060405180910390fd5b612e2c868d63ffffffff612be216565b600954909950612e42908a63ffffffff612aa016565b99506a084595161401484a0000008a1115612e98576040805162461bcd60e51b815260206004820152601160248201527012185c990818d85c08195e18d959591959607a1b604482015290519081900360640190fd5b8660086000612ea5610a62565b6001600160a01b03168152602081019190915260400160002055838a11612f3f5760098a9055612f048960086000612edb610a62565b6001600160a01b031681526020810191909152604001600020600101549063ffffffff612aa016565b60086000612f10610a62565b6001600160a01b0316815260208101919091526040016000206001015550969850610cb7975050505050505050565b6000612f566009548661362690919063ffffffff16565b9350612f78612f6b858963ffffffff612b5816565b8e9063ffffffff61362616565b60098690559150612f87613590565b9097509550612f9c828863ffffffff612be216565b600954909350612fb2908463ffffffff612aa016565b600955612fc5848463ffffffff612aa016565b9050612fd78160086000612edb610a62565b60086000612fe3610a62565b6001600160a01b031681526020810191909152604001600020600101559a50610cb79950505050505050505050565b6003546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610bce573d6000803e3d6000fd5b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526130a5908590613315565b50505050565b6000610cb460045483612be290919063ffffffff16565b612c898282613668565b6000826130db57506000612874565b826000191480156130ef5750600160ff1b82145b1561312b5760405162461bcd60e51b81526004018080602001828103825260278152602001806139926027913960400191505060405180910390fd5b8282028284828161313857fe5b0514612afa5760405162461bcd60e51b81526004018080602001828103825260278152602001806139926027913960400191505060405180910390fd5b6000816131c9576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b816000191480156131dd5750600160ff1b83145b156132195760405162461bcd60e51b815260040180806020018281038252602181526020018061388e6021913960400191505060405180910390fd5b600082848161322457fe5b05949350505050565b613237828261280f565b15613289576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6132b8828261280f565b6132f35760405162461bcd60e51b81526004018080602001828103825260218152602001806138af6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b613327826001600160a01b0316613684565b613378576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106133b65780518252601f199092019160209182019101613397565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613418576040519150601f19603f3d011682016040523d82523d6000602084013e61341d565b606091505b509150915081613474576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156130a55780806020019051602081101561349057600080fd5b50516130a55760405162461bcd60e51b815260040180806020018281038252602a815260200180613a1d602a913960400191505060405180910390fd5b6000818361351c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128e05781810151838201526020016128c8565b50600083858161352857fe5b0495945050505050565b61353a610f79565b613586576040805162461bcd60e51b81526020600482015260186024820152772a34b6b2b221b937bbb239b0b6329d103737ba1037b832b760411b604482015290519081900360640190fd5b612c8982826136c0565b6000806a021165458500521280000060095410156135b85750643a3529440090506001613622565b6a0422ca8b0a00a42500000060095410156135dd57506433bd7a038e90506002613622565b6a06342fd08f00f63780000060095410156136025750642e90edd00090506003613622565b6a084595161401484a000000600954116136225750642a553548ba905060045b9091565b6000612afa83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613757565b600254612c899061010090046001600160a01b03168383612b01565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906136b857508115155b949350505050565b6001600160a01b0382166137055760405162461bcd60e51b815260040180806020018281038252602a8152602001806139f3602a913960400191505060405180910390fd5b80612c89576040805162461bcd60e51b815260206004820152601960248201527f43726f776473616c653a20776569416d6f756e74206973203000000000000000604482015290519081900360640190fd5b600081848411156137a95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128e05781810151838201526020016128c8565b50505090039056fe57686974656c69737443726f776473616c653a2062656e656669636961727920646f65736e27742068617665207468652057686974656c697374656420726f6c6542437562655072697661746553616c653a20627579546f6b656e7328292063616c6c6564436f6e747269627574696f6e207570706572206c696d6974206578636565646564436f6e747269627574696f6e2072616e676520666f72207468697320726f756e64206578636565646564217072697661746553616c655061727469636970616e74207c7c203020424355424520616c6c6f63617465645369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6554696d656443726f776473616c653a206e657720636c6f73696e672074696d65206973206265666f72652063757272656e7420636c6f73696e672074696d65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77526f6c65733a206163636f756e7420697320746865207a65726f206164647265737357686974656c69737441646d696e526f6c653a2063616c6c657220646f6573206e6f742068617665207468652057686974656c69737441646d696e20726f6c655369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7757686974656c6973746564526f6c653a2063616c6c657220646f6573206e6f742068617665207468652057686974656c697374656420726f6c6543726f776473616c653a2062656e656669636961727920697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f6e6c792063616c6c61626c65206166746572206c697374696e6700000000006c697374696e6754696d6520756e6368616e6761626c65206166746572206c697374696e67a265627a7a72315820b31bf961dc8608ff0cee3ee4246633dbf98e8144a5ef9443e270777bf5782d2664736f6c6343000511003254696d656443726f776473616c653a206f70656e696e672074696d65206973206265666f72652063757272656e742074696d6554696d656443726f776473616c653a206f70656e696e672074696d65206973206e6f74206265666f726520636c6f73696e672074696d6543726f776473616c653a20746f6b656e20697320746865207a65726f2061646472657373526f6c65733a206163636f756e7420697320746865207a65726f206164647265737343726f776473616c653a2077616c6c657420697320746865207a65726f2061646472657373",
  "deployedBytecode": "0x6080604052600436106102e45760003560e01c80636ed7702411610190578063b822b96f116100dc578063ec8ac4d811610095578063f9169a7a1161006f578063f9169a7a14610a0e578063f983727b14610a23578063fa04c8ca14610a38578063fc0c546a14610a4d576102e4565b8063ec8ac4d814610956578063f54575d61461097c578063f7d8c2c2146109b5576102e4565b8063b822b96f1461086c578063bb5f747b14610896578063c015889b146108c9578063d0febe4c14610902578063d6cd947314610917578063e131d7351461092c576102e4565b80639e40ee5d11610149578063af43363811610123578063af43363814610803578063b02dbd0714610818578063b3f0d3331461082d578063b7a8807c14610857576102e4565b80639e40ee5d1461079a578063a5075a0d146107af578063a8b9731a146107d9576102e4565b80636ed77024146106ba5780637362d9c8146106ed5780637af32311146107205780637b8751141461073557806390d137f61461076857806394e1426514610792576102e4565b80633e2640d61161024f5780634c5a628c116102085780635c9599de116101e25780635c9599de1461063357806369f61039146106485780636b226b6c1461067b5780636ea2d99814610690576102e4565b80634c5a628c146105df578063521eb273146105f45780635c88957514610609576102e4565b80633e2640d6146105375780634042b66f1461056157806340a2795e1461057657806341b200471461058b57806347535d7b146105b55780634b6753bc146105ca576102e4565b80632f48ab7d116102a15780632f48ab7d1461046a57806333b147421461049b578063352ba579146104b05780633a03171c146104c55780633af32abf146104da5780633c3bebc51461050d576102e4565b806303ca0f6c1461032e5780630eeccb841461037f57806310154bad146103b45780631515bc2b146103e7578063291d9549146104105780632c4e722e14610443575b6102ec610a62565b6001600160a01b03167f8cd787b71532f662d581f9ea765379c7759950cd7dedb590bc8f6f7b454bd5ed346040518082815260200191505060405180910390a2005b34801561033a57600080fd5b506103616004803603602081101561035157600080fd5b50356001600160a01b0316610a66565b60408051938452602084019290925282820152519081900360600190f35b34801561038b57600080fd5b506103b2600480360360208110156103a257600080fd5b50356001600160a01b0316610a87565b005b3480156103c057600080fd5b506103b2600480360360208110156103d757600080fd5b50356001600160a01b0316610b7f565b3480156103f357600080fd5b506103fc610bd1565b604080519115158252519081900360200190f35b34801561041c57600080fd5b506103b26004803603602081101561043357600080fd5b50356001600160a01b0316610bd9565b34801561044f57600080fd5b50610458610c28565b60408051918252519081900360200190f35b34801561047657600080fd5b5061047f610c77565b604080516001600160a01b039092168252519081900360200190f35b3480156104a757600080fd5b50610458610c86565b3480156104bc57600080fd5b50610458610c8c565b3480156104d157600080fd5b50610458610c92565b3480156104e657600080fd5b506103fc600480360360208110156104fd57600080fd5b50356001600160a01b0316610ca1565b34801561051957600080fd5b506103b26004803603602081101561053057600080fd5b5035610cbc565b34801561054357600080fd5b506103b26004803603602081101561055a57600080fd5b5035610daf565b34801561056d57600080fd5b50610458610e41565b34801561058257600080fd5b50610458610e47565b34801561059757600080fd5b506103b2600480360360208110156105ae57600080fd5b5035610e4d565b3480156105c157600080fd5b506103fc610f79565b3480156105d657600080fd5b50610458610f94565b3480156105eb57600080fd5b506103b2610f9a565b34801561060057600080fd5b5061047f610fac565b34801561061557600080fd5b506103b26004803603602081101561062c57600080fd5b5035610fbb565b34801561063f57600080fd5b50610458611246565b34801561065457600080fd5b506103b26004803603602081101561066b57600080fd5b50356001600160a01b031661124c565b34801561068757600080fd5b506104586112dc565b34801561069c57600080fd5b506103b2600480360360208110156106b357600080fd5b50356112e2565b3480156106c657600080fd5b506103b2600480360360208110156106dd57600080fd5b50356001600160a01b03166115d8565b3480156106f957600080fd5b506103b26004803603602081101561071057600080fd5b50356001600160a01b0316611668565b34801561072c57600080fd5b506104586116b7565b34801561074157600080fd5b506103b26004803603602081101561075857600080fd5b50356001600160a01b03166116bd565b34801561077457600080fd5b506103b26004803603602081101561078b57600080fd5b503561174d565b6103b2611831565b3480156107a657600080fd5b506104586119da565b3480156107bb57600080fd5b506103b2600480360360208110156107d257600080fd5b5035611a60565b3480156107e557600080fd5b506103b2600480360360208110156107fc57600080fd5b5035611c19565b34801561080f57600080fd5b50610458611e06565b34801561082457600080fd5b50610458611e0c565b34801561083957600080fd5b506103b26004803603602081101561085057600080fd5b5035611e12565b34801561086357600080fd5b50610458611efa565b34801561087857600080fd5b506103b26004803603602081101561088f57600080fd5b5035611f00565b3480156108a257600080fd5b506103fc600480360360208110156108b957600080fd5b50356001600160a01b03166121eb565b3480156108d557600080fd5b506103b2600480360360408110156108ec57600080fd5b506001600160a01b0381351690602001356121fd565b34801561090e57600080fd5b5061045861233b565b34801561092357600080fd5b506103b2612374565b34801561093857600080fd5b506103b26004803603602081101561094f57600080fd5b5035612384565b6103b26004803603602081101561096c57600080fd5b50356001600160a01b0316612451565b34801561098857600080fd5b506103b26004803603604081101561099f57600080fd5b506001600160a01b038135169060200135612573565b3480156109c157600080fd5b506109e8600480360360208110156109d857600080fd5b50356001600160a01b031661267b565b604080519485526020850193909352838301919091526060830152519081900360800190f35b348015610a1a57600080fd5b506104586126a2565b348015610a2f57600080fd5b506104586126a8565b348015610a4457600080fd5b506104586126ae565b348015610a5957600080fd5b5061047f61276b565b3390565b600d6020526000908152604090208054600182015460029092015490919083565b610a97610a92610a62565b6121eb565b610ad25760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b6001600160a01b0381166000908152600d6020526040902054610b2e576040805162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b23b34b9b7b960891b604482015290519081900360640190fd5b6001600160a01b0381166000818152600d602052604080822082815560018101839055600201829055517f6298d302ce5f4bab7a4009d80433bf2548a274df2564257476d97c940e6897b29190a250565b610b8a610a92610a62565b610bc55760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b610bce8161277f565b50565b600754421190565b610be4610a92610a62565b610c1f5760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b610bce816127c7565b6040805162461bcd60e51b815260206004820152601f60248201527f42437562655072697661746553616c653a207261746528292063616c6c6564006044820152905160009181900360640190fd5b600c546001600160a01b031681565b60165481565b60145481565b6a084595161401484a00000081565b6000610cb460018363ffffffff61280f16565b90505b919050565b610cc4610fac565b6001600160a01b0316610cd5610a62565b6001600160a01b031614610d25576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b610d79816015546009546a14adf4b7320334b9000000036040518060400160405280601781526020017f4f7574206f66207075626c696353616c65207368617265000000000000000000815250600361287a565b6040805182815290517fb334e86d86ec6fee4740b72723594b042696df8b2078c1510e0ff889071160ed9181900360200190a150565b610dba610a92610a62565b610df55760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b610dfe8161297c565b7f3fb76bf02dd0aeceab93b43bc4c039089f0b7578dcbfb81d2a904ece318a87d0610e27610f94565b60408051918252602082018490528051918290030190a150565b60055490565b600e5481565b610e55610fac565b6001600160a01b0316610e66610a62565b6001600160a01b031614610eb6576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b601654421015610efb576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b610f43816012546a05ca4ec2a79a7f67000000604051806040016040528060158152602001744f7574206f6620726573657276657320736861726560581b815250600061287a565b6040805182815290517f16c8b3ea61a43f4b49b7697830aab88eb77ceb2c2dc1ae5f59cb2be86b0b85ba9181900360200190a150565b60006006544210158015610f8f57506007544211155b905090565b60075490565b610faa610fa5610a62565b612a58565b565b6003546001600160a01b031690565b610fc3610fac565b6001600160a01b0316610fd4610a62565b6001600160a01b031614611024576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b601654421015611069576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b600060165463077f880001421061108c57506a0422ca8b0a00a42500000061116d565b60165463068f97000142106110ad57506a039e7139a8c08fa060000061116d565b60165463059fa6000142106110ce57506a031a17e847807b1bc0000061116d565b6016546304afb5000142106110ef57506a0295be96e640669720000061116d565b6016546303bfc40001421061111057506a021165458500521280000061116d565b6016546302cfd30001421061113157506a018d0bf423c03d8de0000061116d565b6016546301dfe20001421061115257506a0108b2a2c280290940000061116d565b60165462eff10001421061116d57506984595161401484a000005b600f54811461117c57600f8190555b600e54600090611192908463ffffffff612aa016565b9050600f548111156111df576040805162461bcd60e51b81526020600482015260116024820152704f7574206f66207465616d20736861726560781b604482015290519081900360640190fd5b600e81905561120e6111ef610fac565b846111f861276b565b6001600160a01b0316919063ffffffff612b0116565b6040805184815290517ff26632d6507893828e9976809970a5a6835d929f140bb32f2369012ef809985d9181900360200190a1505050565b60115481565b611257610a92610a62565b6112925760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b600c80546001600160a01b0319166001600160a01b0383169081179091556040517fac2db933594c5083197a72b940a989b91a7001b86f20a7ad67095c54239bae0b90600090a250565b60135481565b601654421015611327576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b600060086000611335610a62565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010154116113955760405162461bcd60e51b815260040180806020018281038252602c815260200180613862602c913960400191505060405180910390fd5b6000806113d26004600860006113a9610a62565b6001600160a01b031681526020810191909152604001600020600101549063ffffffff612b5816565b9050601654629e34000142106113ed57806004029150611431565b6016546276a70001421061140657806003029150611431565b601654624f1a0001421061141f57806002029150611431565b60165462278d00014210611431578091505b6008600061143d610a62565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201548214611492578160086000611474610a62565b6001600160a01b031681526020810191909152604001600020600201555b60006114cd84600860006114a4610a62565b6001600160a01b031681526020810191909152604001600020600301549063ffffffff612aa016565b9050600860006114db610a62565b6001600160a01b03166001600160a01b031681526020019081526020016000206002015481111561154c576040805162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b604482015290519081900360640190fd5b8060086000611559610a62565b6001600160a01b0316815260208101919091526040016000206003015561158a611581610a62565b856111f861276b565b611592610a62565b6001600160a01b03167f845fb39b5b60bc9f899236606f87e43e7d4ec84f6fe7255e158cb5cae8d62147856040518082815260200191505060405180910390a250505050565b6115e3610a92610a62565b61161e5760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b600b80546001600160a01b0319166001600160a01b0383169081179091556040517fd8fbae2ea5968d1f413f3c548aac18b3ebab988ff71c886d37822db6593d66b990600090a250565b611673610a92610a62565b6116ae5760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b610bce81612b9a565b60105481565b6116c8610a92610a62565b6117035760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f736ca4159357d1cbf704728e18931af966772d5708578447e6e9093b90668aab90600090a250565b611755610fac565b6001600160a01b0316611766610a62565b6001600160a01b0316146117b6576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b6117fb816014546969e10de76676d0800000604051806040016040528060138152602001724f7574206f6620626f756e747920736861726560681b815250600261287a565b6040805182815290517fd59808818ea399dc1f6f392a7a6adc6687486ee856e1d336f917dbc22783dafb9181900360200190a150565b61184161183c610a62565b610ca1565b61187c5760405162461bcd60e51b815260040180806020018281038252603a8152602001806139b9603a913960400191505060405180910390fd5b611884610f79565b6118d0576040805162461bcd60e51b81526020600482015260186024820152772a34b6b2b221b937bbb239b0b6329d103737ba1037b832b760411b604482015290519081900360640190fd5b6a084595161401484a00000060095410611928576040805162461bcd60e51b8152602060048201526014602482015273105b1b081d1bdad95b9cc8185b1b1bd8d85d195960621b604482015290519081900360640190fd5b6000806119336119da565b9050600061195f670de0b6b3a7640000611953843463ffffffff612be216565b9063ffffffff612b5816565b905061197261196c610a62565b34612c3b565b61197b81612c8d565b9250611985613012565b61198d610a62565b6001600160a01b03167fe23d136c8a147edd57f9cb65571186cacad0b34301c4785d3cf49dbad8b316c73485604051808381526020018281526020019250505060405180910390a2505050565b600080600a60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611a2b57600080fd5b505afa158015611a3f573d6000803e3d6000fd5b505050506040513d60a0811015611a5557600080fd5b506020015191505090565b611a6b61183c610a62565b611aa65760405162461bcd60e51b815260040180806020018281038252603a8152602001806139b9603a913960400191505060405180910390fd5b611aae610f79565b611afa576040805162461bcd60e51b81526020600482015260186024820152772a34b6b2b221b937bbb239b0b6329d103737ba1037b832b760411b604482015290519081900360640190fd5b6a084595161401484a00000060095410611b52576040805162461bcd60e51b8152602060048201526014602482015273105b1b081d1bdad95b9cc8185b1b1bd8d85d195960621b604482015290519081900360640190fd5b600080611b5d6126ae565b90506000611b78620f4240611953848763ffffffff612be216565b9050611b8b611b85610a62565b85612c3b565b611b9481612c8d565b9250611bc3611ba1610a62565b611ba9610fac565b600c546001600160a01b031691908763ffffffff61304b16565b611bcb610a62565b6001600160a01b03167f5bd5fa9268384c2ce0efa4eadd3467d081f25e7b77e13153712be145940c6c878585604051808381526020018281526020019250505060405180910390a250505050565b611c21610fac565b6001600160a01b0316611c32610a62565b6001600160a01b031614611c82576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b601654421015611cc7576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b60006016546303bfc400014210611cea57506a06342fd08f00f637800000611d48565b6016546302cfd300014210611d0b57506a04a723dc6b40b8a9a00000611d48565b6016546301dfe200014210611d2c57506a031a17e847807b1bc00000611d48565b60165462eff100014210611d4857506a018d0bf423c03d8de000005b6011548114611d575760118190555b601054600090611d6d908463ffffffff612aa016565b9050601154811115611dbe576040805162461bcd60e51b81526020600482015260156024820152744f7574206f66206465762066756e6420736861726560581b604482015290519081900360640190fd5b6010819055611dce6111ef610fac565b6040805184815290517f508ce4df5cb712355b1838ebe7960f1c5fa233089109a878ad0f18a967731f839181900360200190a1505050565b60155481565b600f5481565b611e1a610fac565b6001600160a01b0316611e2b610a62565b6001600160a01b031614611e7b576040805162461bcd60e51b815260206004820152601260248201527113db9b1e481d19585b4818d85b8818d85b1b60721b604482015290519081900360640190fd5b611ec4816013546a0211654585005212800000604051806040016040528060168152602001754f7574206f6620636f6d6d756e69747920736861726560501b815250600161287a565b6040805182815290517f0594920c4254328af12b1023920cfff58872cafff2fd66d1d817476bb6d031fc9181900360200190a150565b60065490565b601654421015611f45576040805162461bcd60e51b815260206004820152601b6024820152600080516020613a47833981519152604482015290519081900360640190fd5b600080600d6000611f54610a62565b6001600160a01b0316815260208101919091526040016000205411611fab576040805162461bcd60e51b815260206004820152600860248201526710b0b23b34b9b7b960c11b604482015290519081900360640190fd5b6000600d6000611fb9610a62565b6001600160a01b031681526020810191909152604001600020546016549091506303bfc400014210611ffd57611ff681600463ffffffff612be216565b915061204f565b6016546302cfd30001421061201d57611ff681600363ffffffff612be216565b6016546301dfe20001421061203d57611ff681600263ffffffff612be216565b60165462eff10001421061204f578091505b600d600061205b610a62565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015482146120b05781600d6000612092610a62565b6001600160a01b031681526020810191909152604001600020600101555b60006120eb84600d60006120c2610a62565b6001600160a01b031681526020810191909152604001600020600201549063ffffffff612aa016565b9050600d60006120f9610a62565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010154811115612168576040805162461bcd60e51b81526020600482015260146024820152734f7574206f662061647669736f7220736861726560601b604482015290519081900360640190fd5b80600d6000612175610a62565b6001600160a01b0316815260208101919091526040016000206002015561219d611581610a62565b6121a5610a62565b6001600160a01b03167f83daae824bbbbfe48150a95968b3e11ea42986b7ed680da649d4045cf979ba5e856040518082815260200191505060405180910390a250505050565b6000610cb4818363ffffffff61280f16565b612208610a92610a62565b6122435760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b6001600160a01b0382166000908152600d602052604081205461229f576040805162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b23b34b9b7b960891b604482015290519081900360640190fd5b6001600160a01b0383166000908152600d60205260409020546122c990600463ffffffff612be216565b90506122dc82600463ffffffff612b5816565b6001600160a01b0384166000818152600d6020908152604091829020939093558051848152928301859052805191927f1cfb75aad73a4e1eb81a4f24427f023bbcc8c11f9454a2cc9aa653ca8b6a5e12929081900390910190a2505050565b600060405162461bcd60e51b81526004018080602001828103825260248152602001806137f36024913960400191505060405180910390fd5b610faa61237f610a62565b6127c7565b61238f610a92610a62565b6123ca5760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b601654421061240a5760405162461bcd60e51b8152600401808060200182810382526025815260200180613a676025913960400191505060405180910390fd5b6016805490829055604080518281526020810184905281517f718791b3330ed4ee60d5ad30aca426a54ec7062bd224681d168dbf222db6c677929181900390910190a15050565b60025460ff166124a8576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805460ff19169055346124bd8282612c3b565b60006124c8826130ab565b6005549091506124de908363ffffffff612aa016565b6005556124eb83826130c2565b826001600160a01b03166124fd610a62565b6001600160a01b03167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a361254f8383612c89565b612557613012565b6125618383612c89565b50506002805460ff1916600117905550565b61257e610a92610a62565b6125b95760405162461bcd60e51b81526004018080602001828103825260408152602001806139526040913960400191505060405180910390fd5b6001600160a01b038216612614576040805162461bcd60e51b815260206004820152601760248201527f496e76616c69642061647669736f722061646472657373000000000000000000604482015290519081900360640190fd5b61262581600463ffffffff612b5816565b6001600160a01b0383166000818152600d6020908152604091829020939093558051848152905191927fc56faf057c0642115e9d238198d1c9185ba17968fce92c3f01263cf12475c7a692918290030190a25050565b60086020526000908152604090208054600182015460028301546003909301549192909184565b60125481565b60095481565b600080600b60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156126ff57600080fd5b505afa158015612713573d6000803e3d6000fd5b505050506040513d60a081101561272957600080fd5b50602001519050600061273a6119da565b9050612764670de0b6b3a7640000612758848463ffffffff6130cc16565b9063ffffffff61317516565b9250505090565b60025461010090046001600160a01b031690565b61279060018263ffffffff61322d16565b6040516001600160a01b038216907fee1504a83b6d4a361f4c1dc78ab59bfa30d6a3b6612c403e86bb01ef2984295f90600090a250565b6127d860018263ffffffff6132ae16565b6040516001600160a01b038216907f270d9b30cf5b0793bbfd54c9d5b94aeb49462b8148399000265144a8722da6b690600090a250565b60006001600160a01b0382166128565760405162461bcd60e51b81526004018080602001828103825260228152602001806139306022913960400191505060405180910390fd5b506001600160a01b03811660009081526020839052604090205460ff165b92915050565b600061288c858763ffffffff612aa016565b9050828482111561291b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128e05781810151838201526020016128c8565b50505050905090810190601f16801561290d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508161292b576012819055612960565b816001141561293e576013819055612960565b8160021415612951576014819055612960565b81600314156129605760158190555b61297461296b610fac565b876111f861276b565b505050505050565b612984610bd1565b156129d6576040805162461bcd60e51b815260206004820152601e60248201527f54696d656443726f776473616c653a20616c726561647920636c6f7365640000604482015290519081900360640190fd5b6007548111612a165760405162461bcd60e51b815260040180806020018281038252603f8152602001806138d0603f913960400191505060405180910390fd5b600754604080519182526020820183905280517f46711e222f558a07afd26e5e71b48ecb0a8b2cdcd40faeb1323e05e2c76a2f329281900390910190a1600755565b612a6960008263ffffffff6132ae16565b6040516001600160a01b038216907f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16590600090a250565b600082820183811015612afa576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612b53908490613315565b505050565b6000612afa83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506134cd565b612bab60008263ffffffff61322d16565b6040516001600160a01b038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b600082612bf157506000612874565b82820282848281612bfe57fe5b0414612afa5760405162461bcd60e51b815260040180806020018281038252602181526020018061390f6021913960400191505060405180910390fd5b612c4482610ca1565b612c7f5760405162461bcd60e51b81526004018080602001828103825260418152602001806137b26041913960600191505060405180910390fd5b612c898282613532565b5050565b6000806000806000806000806000806000612ca6613590565b80965081975050508460ff166a0211654585005212800000026affffffffffffffffffffff1693506a021165458500521280000060095411612cef5764174876e8009750612d4e565b6a0422ca8b0a00a42500000060095411612d1057640ba43b74009750612d4e565b6a06342fd08f00f63780000060095411612d31576405d21dba009750612d4e565b6a084595161401484a00000060095411612d4e576402540be40097505b8b8811158015612d645750650246139ca8008c11155b612d9f5760405162461bcd60e51b815260040180806020018281038252602a815260200180613838602a913960400191505060405180910390fd5b612dd58c60086000612daf610a62565b6001600160a01b031681526020810191909152604001600020549063ffffffff612aa016565b9650650246139ca800871115612e1c5760405162461bcd60e51b81526004018080602001828103825260218152602001806138176021913960400191505060405180910390fd5b612e2c868d63ffffffff612be216565b600954909950612e42908a63ffffffff612aa016565b99506a084595161401484a0000008a1115612e98576040805162461bcd60e51b815260206004820152601160248201527012185c990818d85c08195e18d959591959607a1b604482015290519081900360640190fd5b8660086000612ea5610a62565b6001600160a01b03168152602081019190915260400160002055838a11612f3f5760098a9055612f048960086000612edb610a62565b6001600160a01b031681526020810191909152604001600020600101549063ffffffff612aa016565b60086000612f10610a62565b6001600160a01b0316815260208101919091526040016000206001015550969850610cb7975050505050505050565b6000612f566009548661362690919063ffffffff16565b9350612f78612f6b858963ffffffff612b5816565b8e9063ffffffff61362616565b60098690559150612f87613590565b9097509550612f9c828863ffffffff612be216565b600954909350612fb2908463ffffffff612aa016565b600955612fc5848463ffffffff612aa016565b9050612fd78160086000612edb610a62565b60086000612fe3610a62565b6001600160a01b031681526020810191909152604001600020600101559a50610cb79950505050505050505050565b6003546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610bce573d6000803e3d6000fd5b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526130a5908590613315565b50505050565b6000610cb460045483612be290919063ffffffff16565b612c898282613668565b6000826130db57506000612874565b826000191480156130ef5750600160ff1b82145b1561312b5760405162461bcd60e51b81526004018080602001828103825260278152602001806139926027913960400191505060405180910390fd5b8282028284828161313857fe5b0514612afa5760405162461bcd60e51b81526004018080602001828103825260278152602001806139926027913960400191505060405180910390fd5b6000816131c9576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b816000191480156131dd5750600160ff1b83145b156132195760405162461bcd60e51b815260040180806020018281038252602181526020018061388e6021913960400191505060405180910390fd5b600082848161322457fe5b05949350505050565b613237828261280f565b15613289576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6132b8828261280f565b6132f35760405162461bcd60e51b81526004018080602001828103825260218152602001806138af6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b613327826001600160a01b0316613684565b613378576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106133b65780518252601f199092019160209182019101613397565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613418576040519150601f19603f3d011682016040523d82523d6000602084013e61341d565b606091505b509150915081613474576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156130a55780806020019051602081101561349057600080fd5b50516130a55760405162461bcd60e51b815260040180806020018281038252602a815260200180613a1d602a913960400191505060405180910390fd5b6000818361351c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128e05781810151838201526020016128c8565b50600083858161352857fe5b0495945050505050565b61353a610f79565b613586576040805162461bcd60e51b81526020600482015260186024820152772a34b6b2b221b937bbb239b0b6329d103737ba1037b832b760411b604482015290519081900360640190fd5b612c8982826136c0565b6000806a021165458500521280000060095410156135b85750643a3529440090506001613622565b6a0422ca8b0a00a42500000060095410156135dd57506433bd7a038e90506002613622565b6a06342fd08f00f63780000060095410156136025750642e90edd00090506003613622565b6a084595161401484a000000600954116136225750642a553548ba905060045b9091565b6000612afa83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613757565b600254612c899061010090046001600160a01b03168383612b01565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906136b857508115155b949350505050565b6001600160a01b0382166137055760405162461bcd60e51b815260040180806020018281038252602a8152602001806139f3602a913960400191505060405180910390fd5b80612c89576040805162461bcd60e51b815260206004820152601960248201527f43726f776473616c653a20776569416d6f756e74206973203000000000000000604482015290519081900360640190fd5b600081848411156137a95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128e05781810151838201526020016128c8565b50505090039056fe57686974656c69737443726f776473616c653a2062656e656669636961727920646f65736e27742068617665207468652057686974656c697374656420726f6c6542437562655072697661746553616c653a20627579546f6b656e7328292063616c6c6564436f6e747269627574696f6e207570706572206c696d6974206578636565646564436f6e747269627574696f6e2072616e676520666f72207468697320726f756e64206578636565646564217072697661746553616c655061727469636970616e74207c7c203020424355424520616c6c6f63617465645369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6554696d656443726f776473616c653a206e657720636c6f73696e672074696d65206973206265666f72652063757272656e7420636c6f73696e672074696d65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77526f6c65733a206163636f756e7420697320746865207a65726f206164647265737357686974656c69737441646d696e526f6c653a2063616c6c657220646f6573206e6f742068617665207468652057686974656c69737441646d696e20726f6c655369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7757686974656c6973746564526f6c653a2063616c6c657220646f6573206e6f742068617665207468652057686974656c697374656420726f6c6543726f776473616c653a2062656e656669636961727920697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f6e6c792063616c6c61626c65206166746572206c697374696e6700000000006c697374696e6754696d6520756e6368616e6761626c65206166746572206c697374696e67a265627a7a72315820b31bf961dc8608ff0cee3ee4246633dbf98e8144a5ef9443e270777bf5782d2664736f6c63430005110032",
  "devdoc": {
    "author": "Smit Rajput @ b-cube.ai*",
    "methods": {
      "advisorShareWithdraw(uint256)": {
        "details": "allows existing advisors to withdraw their share of BCUBEs, 25% per 6 months, after listingTime"
      },
      "bountyShareWithdraw(uint256)": {
        "details": "allows team to withdraw bounty share of BCUBEs i.e. 0.5m"
      },
      "buyBcubeUsingETH()": {
        "details": "allowing users to allocate BCUBEs for themselves using ETH only KYC/AML whitelisted users can call this, while the sale is open and allocation hard cap is not reachedit fetches current price of ETH, multiples that by incoming ETH to calc total incoming dollar units, then allocates appropriate amount of BCUBE to user based on current rate, stage"
      },
      "buyBcubeUsingUSDT(uint256)": {
        "details": "allowing users to allocate BCUBEs for themselves using USDT does all things similar to the above function, but for USDT"
      },
      "buyTokens()": {
        "details": "token buying function of the parent contract which is not used for this contract"
      },
      "buyTokens(address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
        "params": {
          "beneficiary": "Recipient of the token purchase"
        }
      },
      "closingTime()": {
        "return": "the crowdsale closing time."
      },
      "communityShareWithdraw(uint256)": {
        "details": "allows team to withdraw community share of BCUBEs i.e. 2.5m"
      },
      "constructor": {
        "params": {
          "wallet_": "team's address which controls all BCUBEs except private sale share"
        }
      },
      "devFundShareWithdraw(uint256)": {
        "details": "allows team to withdraw devFund share of BCUBEs, 25% of 7.5m, per 6 months, after listingTime"
      },
      "extendClosingTime(uint256)": {
        "details": "to extend the current closing time of private sale"
      },
      "fetchETHPrice()": {
        "details": "fetching ETH price from chainlink oracle"
      },
      "fetchUSDTPrice()": {
        "details": "fetching USDT price from chainlink oracle"
      },
      "hasClosed()": {
        "details": "Checks whether the period in which the crowdsale is open has already elapsed.",
        "return": "Whether crowdsale period has elapsed"
      },
      "isOpen()": {
        "return": "true if the crowdsale is open, false otherwise."
      },
      "openingTime()": {
        "return": "the crowdsale opening time."
      },
      "privateSaleShareWithdraw(uint256)": {
        "details": "allows private sale participants to withdraw their allocated share of BCUBEs, 25% per 30 days, after listingTime"
      },
      "publicSaleShareWithdraw(uint256)": {
        "details": "allows team to withdraw publicSale share of BCUBEs i.e. 25m - (netAllocatedBcube in private sale)"
      },
      "rate()": {
        "details": "dummy rate for the parent contract which is not used for this contract"
      },
      "reservesShareWithdraw(uint256)": {
        "details": "allows team to withdraw reserves share of BCUBEs i.e. 7m after listingTime"
      },
      "setAdvisorAllowance(address,uint256)": {
        "details": "allows deployer to change net allowance of existing advisor"
      },
      "setETHPriceFeed(address)": {
        "details": "allowing resetting ETH, USDT priceFeed instances, in case current Chainlink contracts upgrade"
      },
      "setListingTime(uint256)": {
        "details": "WhitelistAdmin is the deployerallows deployer to change listingTime, before current listingTime"
      },
      "setUSDTInstance(address)": {
        "details": "allowing resetting USDT instance, in case current contract upgrades"
      },
      "teamShareWithdraw(uint256)": {
        "details": "allows team to withdraw their share of BCUBEs, 12.5% of 5m, per 6 months, after listingTime"
      },
      "token()": {
        "return": "the token being sold."
      },
      "wallet()": {
        "return": "the address where funds are collected."
      },
      "weiRaised()": {
        "return": "the amount of wei raised."
      }
    },
    "title": "BCUBE Treasury"
  },
  "userdoc": {
    "methods": {},
    "notice": "Contract in which 50m BCUBE will be minted after private sale, and distributed to stakeholders, in vested manner to whomever applicable"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 172,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_whitelistAdmins",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Role)79_storage"
      },
      {
        "astId": 282,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_whitelisteds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Role)79_storage"
      },
      {
        "astId": 2141,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_notEntered",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 392,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_token",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IERC20)1842"
      },
      {
        "astId": 394,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_wallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 396,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_rate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 398,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_weiRaised",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 661,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_openingTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 663,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_closingTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2315,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bcubeAllocationRegistry",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserInfo)2311_storage)"
      },
      {
        "astId": 2317,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "netAllocatedBcube",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2322,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "priceFeedETH",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2324,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "priceFeedUSDT",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2326,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "usdt",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)1842"
      },
      {
        "astId": 3238,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "advisors",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Advisor)3234_storage)"
      },
      {
        "astId": 3240,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "teamShareWithdrawn",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3242,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "teamAllowance",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3244,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFundShareWithdrawn",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3246,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFundAllowance",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3248,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "reservesWithdrawn",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3250,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "communityShareWithdrawn",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3252,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bountyWithdrawn",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3254,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "publicSaleShareWithdrawn",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3256,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "listingTime",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1842": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Advisor)3234_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Treasury.Advisor)",
        "numberOfBytes": "32",
        "value": "t_struct(Advisor)3234_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)2311_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BCUBEPrivateSale.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2311_storage"
      },
      "t_struct(Advisor)3234_storage": {
        "encoding": "inplace",
        "label": "struct Treasury.Advisor",
        "members": [
          {
            "astId": 3229,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "increaseInAllowance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3231,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "currentAllowance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3233,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "shareWithdrawn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Role)79_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 78,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UserInfo)2311_storage": {
        "encoding": "inplace",
        "label": "struct BCUBEPrivateSale.UserInfo",
        "members": [
          {
            "astId": 2304,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "dollarUnitsPayed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2306,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "allocatedBcube",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2308,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "currentAllowance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2310,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "shareWithdrawn",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}